/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { triggersCreateTrigger } from "../funcs/triggersCreateTrigger.js";
import { triggersDeleteTrigger } from "../funcs/triggersDeleteTrigger.js";
import { triggersListTrigger } from "../funcs/triggersListTrigger.js";
import { triggersUpdateTrigger } from "../funcs/triggersUpdateTrigger.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Triggers extends ClientSDK {
  /**
   * Lists all webhook notification triggers configured for your product environmentcloudinary
   *
   * @remarks
   * Retrieves a list of all event triggers and notifications within your product environment.
   */
  async listTrigger(
    eventType?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListTriggerResponse> {
    return unwrapAsync(triggersListTrigger(
      this,
      eventType,
      options,
    ));
  }

  /**
   * Creates a new notification trigger (webhook) by specifying an event type and a destination
   *
   * @remarks
   * Creates a new trigger.
   * Your product environment supports triggers up to a maximum determined by multiplying the number of unique event types by the limit of 30 notification URLs.
   */
  async createTrigger(
    request: operations.CreateTriggerRequest,
    options?: RequestOptions,
  ): Promise<components.TriggerInfo> {
    return unwrapAsync(triggersCreateTrigger(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates the callback URL of an existing webhook trigger in your Cloudinary account
   *
   * @remarks
   * Updates a notification URL for a trigger.
   */
  async updateTrigger(
    id: string,
    requestBody: operations.UpdateTriggerRequestBody,
    options?: RequestOptions,
  ): Promise<operations.UpdateTriggerResponse> {
    return unwrapAsync(triggersUpdateTrigger(
      this,
      id,
      requestBody,
      options,
    ));
  }

  /**
   * Deletes a notification trigger
   *
   * @remarks
   * Deletes a trigger.
   */
  async deleteTrigger(
    id: string,
    options?: RequestOptions,
  ): Promise<operations.DeleteTriggerResponse> {
    return unwrapAsync(triggersDeleteTrigger(
      this,
      id,
      options,
    ));
  }
}
