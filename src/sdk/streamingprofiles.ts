/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { streamingProfilesCreateStreamingProfile } from "../funcs/streamingProfilesCreateStreamingProfile.js";
import { streamingProfilesDeleteStreamingProfile } from "../funcs/streamingProfilesDeleteStreamingProfile.js";
import { streamingProfilesGetStreamingProfile } from "../funcs/streamingProfilesGetStreamingProfile.js";
import { streamingProfilesGetStreamingProfiles } from "../funcs/streamingProfilesGetStreamingProfiles.js";
import { streamingProfilesUpdateStreamingProfile } from "../funcs/streamingProfilesUpdateStreamingProfile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class StreamingProfiles extends ClientSDK {
  /**
   * Create streaming profile
   */
  async createStreamingProfile(
    request: components.StreamingProfileCreate,
    options?: RequestOptions,
  ): Promise<operations.CreateStreamingProfileResponse> {
    return unwrapAsync(streamingProfilesCreateStreamingProfile(
      this,
      request,
      options,
    ));
  }

  /**
   * Get streaming profiles
   */
  async getStreamingProfiles(
    request: operations.GetStreamingProfilesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStreamingProfilesResponse> {
    return unwrapAsync(streamingProfilesGetStreamingProfiles(
      this,
      request,
      options,
    ));
  }

  /**
   * Get streaming profile
   */
  async getStreamingProfile(
    request: operations.GetStreamingProfileRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStreamingProfileResponse> {
    return unwrapAsync(streamingProfilesGetStreamingProfile(
      this,
      request,
      options,
    ));
  }

  /**
   * Update streaming profile
   */
  async updateStreamingProfile(
    request: operations.UpdateStreamingProfileRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateStreamingProfileResponse> {
    return unwrapAsync(streamingProfilesUpdateStreamingProfile(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete custom streaming profile or revert built-in profile to the original settings
   */
  async deleteStreamingProfile(
    request: operations.DeleteStreamingProfileRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteStreamingProfileResponse> {
    return unwrapAsync(streamingProfilesDeleteStreamingProfile(
      this,
      request,
      options,
    ));
  }
}
