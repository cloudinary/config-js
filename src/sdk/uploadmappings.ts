/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { uploadMappingsCreateUploadMapping } from "../funcs/uploadMappingsCreateUploadMapping.js";
import { uploadMappingsDeleteUploadMapping } from "../funcs/uploadMappingsDeleteUploadMapping.js";
import { uploadMappingsListUploadMappings } from "../funcs/uploadMappingsListUploadMappings.js";
import { uploadMappingsReplaceUploadMappings } from "../funcs/uploadMappingsReplaceUploadMappings.js";
import { uploadMappingsUpdateUploadMapping } from "../funcs/uploadMappingsUpdateUploadMapping.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class UploadMappings extends ClientSDK {
  /**
   * Lists upload mappings
   *
   * @remarks
   * Returns a list of all upload mappings defined for your account.
   * Upload mappings allow you to map an upload preset to a specific folder and URL template.
   */
  async listUploadMappings(
    request: operations.ListUploadMappingsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListUploadMappingsResponse> {
    return unwrapAsync(uploadMappingsListUploadMappings(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates an upload mapping
   *
   * @remarks
   * Creates a new upload mapping for the specified folder
   */
  async createUploadMapping(
    request: operations.CreateUploadMappingRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateUploadMappingResponse> {
    return unwrapAsync(uploadMappingsCreateUploadMapping(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates an upload mapping
   *
   * @remarks
   * Updates the URL template for an existing folder mapping
   */
  async updateUploadMapping(
    request: operations.UpdateUploadMappingRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateUploadMappingResponse> {
    return unwrapAsync(uploadMappingsUpdateUploadMapping(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes an upload mapping
   *
   * @remarks
   * Permanently deletes the upload mapping for the specified folder
   */
  async deleteUploadMapping(
    request: operations.DeleteUploadMappingRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteUploadMappingResponse> {
    return unwrapAsync(uploadMappingsDeleteUploadMapping(
      this,
      request,
      options,
    ));
  }

  /**
   * Replaces all upload mappings
   */
  async replaceUploadMappings(
    request: operations.ReplaceUploadMappingsRequest,
    options?: RequestOptions,
  ): Promise<operations.ReplaceUploadMappingsResponse> {
    return unwrapAsync(uploadMappingsReplaceUploadMappings(
      this,
      request,
      options,
    ));
  }
}
