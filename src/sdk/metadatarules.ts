/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metadataRulesCreateMetadataRule } from "../funcs/metadataRulesCreateMetadataRule.js";
import { metadataRulesDeleteMetadataRule } from "../funcs/metadataRulesDeleteMetadataRule.js";
import { metadataRulesListMetadataRules } from "../funcs/metadataRulesListMetadataRules.js";
import { metadataRulesUpdateMetadataRule } from "../funcs/metadataRulesUpdateMetadataRule.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MetadataRules extends ClientSDK {
  /**
   * Create a metadata rule
   *
   * @remarks
   * Creates a new metadata rule with the specified properties and configuration.
   */
  async createMetadataRule(
    request: components.MetadataRuleCreate,
    options?: RequestOptions,
  ): Promise<components.MetadataRuleResponse> {
    return unwrapAsync(metadataRulesCreateMetadataRule(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metadata rules
   *
   * @remarks
   * Retrieves a list of all metadata rules in the cloud.
   */
  async listMetadataRules(
    request: operations.ListMetadataRulesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListMetadataRulesResponse> {
    return unwrapAsync(metadataRulesListMetadataRules(
      this,
      request,
      options,
    ));
  }

  /**
   * Update metadata rule
   *
   * @remarks
   * Updates the properties and configuration of an existing metadata rule.
   */
  async updateMetadataRule(
    request: operations.UpdateMetadataRuleRequest,
    options?: RequestOptions,
  ): Promise<components.MetadataRuleResponse> {
    return unwrapAsync(metadataRulesUpdateMetadataRule(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete metadata rule
   *
   * @remarks
   * Permanently deletes a metadata rule.
   */
  async deleteMetadataRule(
    request: operations.DeleteMetadataRuleRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteMetadataRuleResponse> {
    return unwrapAsync(metadataRulesDeleteMetadataRule(
      this,
      request,
      options,
    ));
  }
}
