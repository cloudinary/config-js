/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { uploadPresetsCreateUploadPreset } from "../funcs/uploadPresetsCreateUploadPreset.js";
import { uploadPresetsDeleteUploadPreset } from "../funcs/uploadPresetsDeleteUploadPreset.js";
import { uploadPresetsGetUploadPreset } from "../funcs/uploadPresetsGetUploadPreset.js";
import { uploadPresetsListUploadPresets } from "../funcs/uploadPresetsListUploadPresets.js";
import { uploadPresetsUpdateUploadPreset } from "../funcs/uploadPresetsUpdateUploadPreset.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class UploadPresets extends ClientSDK {
  /**
   * Creates a new upload preset with specified configuration settings
   */
  async createUploadPreset(
    request: components.UploadPreset,
    options?: RequestOptions,
  ): Promise<operations.CreateUploadPresetResponse> {
    return unwrapAsync(uploadPresetsCreateUploadPreset(
      this,
      request,
      options,
    ));
  }

  /**
   * Lists all upload presets configured in the account
   */
  async listUploadPresets(
    orderBy?: operations.OrderBy | undefined,
    direction?: operations.Direction | undefined,
    nextCursor?: number | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListUploadPresetsResponse> {
    return unwrapAsync(uploadPresetsListUploadPresets(
      this,
      orderBy,
      direction,
      nextCursor,
      options,
    ));
  }

  /**
   * Retrieves details of a single upload preset
   */
  async getUploadPreset(
    name: string,
    options?: RequestOptions,
  ): Promise<components.UploadPreset> {
    return unwrapAsync(uploadPresetsGetUploadPreset(
      this,
      name,
      options,
    ));
  }

  /**
   * Updates an existing upload preset's configuration settings
   */
  async updateUploadPreset(
    name: string,
    uploadPreset: components.UploadPreset,
    options?: RequestOptions,
  ): Promise<operations.UpdateUploadPresetResponse> {
    return unwrapAsync(uploadPresetsUpdateUploadPreset(
      this,
      name,
      uploadPreset,
      options,
    ));
  }

  /**
   * Deletes an upload preset from the account
   */
  async deleteUploadPreset(
    name: string,
    options?: RequestOptions,
  ): Promise<operations.DeleteUploadPresetResponse> {
    return unwrapAsync(uploadPresetsDeleteUploadPreset(
      this,
      name,
      options,
    ));
  }
}
