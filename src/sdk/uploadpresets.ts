/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { uploadPresetsCreateUploadPreset } from "../funcs/uploadPresetsCreateUploadPreset.js";
import { uploadPresetsDeleteUploadPreset } from "../funcs/uploadPresetsDeleteUploadPreset.js";
import { uploadPresetsGetUploadPreset } from "../funcs/uploadPresetsGetUploadPreset.js";
import { uploadPresetsListUploadPresets } from "../funcs/uploadPresetsListUploadPresets.js";
import { uploadPresetsUpdateUploadPreset } from "../funcs/uploadPresetsUpdateUploadPreset.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class UploadPresets extends ClientSDK {
  /**
   * Creates an upload preset
   */
  async createUploadPreset(
    request: components.UploadPreset,
    options?: RequestOptions,
  ): Promise<operations.CreateUploadPresetResponse> {
    return unwrapAsync(uploadPresetsCreateUploadPreset(
      this,
      request,
      options,
    ));
  }

  /**
   * lists upload presets
   */
  async listUploadPresets(
    request: operations.ListUploadPresetsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListUploadPresetsResponse> {
    return unwrapAsync(uploadPresetsListUploadPresets(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves details of a single upload preset
   */
  async getUploadPreset(
    request: operations.GetUploadPresetRequest,
    options?: RequestOptions,
  ): Promise<components.UploadPreset> {
    return unwrapAsync(uploadPresetsGetUploadPreset(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates an upload preset
   */
  async updateUploadPreset(
    request: operations.UpdateUploadPresetRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateUploadPresetResponse> {
    return unwrapAsync(uploadPresetsUpdateUploadPreset(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes an upload preset
   */
  async deleteUploadPreset(
    request: operations.DeleteUploadPresetRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteUploadPresetResponse> {
    return unwrapAsync(uploadPresetsDeleteUploadPreset(
      this,
      request,
      options,
    ));
  }
}
