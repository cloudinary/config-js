/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { streamingProfilesGetStreamingProfile } from "../../funcs/streamingProfilesGetStreamingProfile.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  name: z.string(),
};

export const tool$streamingProfilesGetStreamingProfile: ToolDefinition<
  typeof args
> = {
  name: "get-streaming-profile",
  description:
    `Purpose: Retrieves the details of a single adaptive streaming profile by its name It returns the profile's full configuration, including all representation settings, so you can inspect exactly how that profile is defined.
Usage: Use this operation when you need information about one specific streaming profile. For example, to verify a custom profile's resolutions and bitrates or to display the configuration of a particular profile in a management interface. Simply provide the profile's name to get its attributes and settings.
When Not to Use: Avoid using this to fetch many profiles one by one; if you require multiple profiles or an overview of all profiles, use **list-streaming-profiles** instead. Also, do not use this operation for creating or updating profiles (it is read-only); use **create-streaming-profile** or **update-streaming-profile** for those tasks.
Output: Returns a single streaming profile object with its details. The output includes fields such as the profile's unique \`external_id\`, \`name\`, \`display_name\`, a \`predefined\` flag (indicating if it's a built-in profile), and an array of \`representations\` (each describing a video transformation for that profile).
`,
  scopes: ["builder"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await streamingProfilesGetStreamingProfile(
      client,
      args.name,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
