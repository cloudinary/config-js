/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { triggersUpdateTrigger } from "../../funcs/triggersUpdateTrigger.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  id: z.string(),
  requestBody: operations.UpdateTriggerRequestBody$inboundSchema,
};

export const tool$triggersUpdateTrigger: ToolDefinition<typeof args> = {
  name: "update-trigger",
  description:
    `Purpose: Updates the notification URL for an existing event trigger, allowing you to redirect webhook notifications to a new endpoint without recreating the trigger configuration.
Usage: Use this when you need to change the destination URL for webhook notifications due to infrastructure changes, endpoint migrations, or updated integration requirements. Essential for maintaining webhook continuity during system updates.
Example request: {"new_uri": "https://new-webhook.site/updated-endpoint"}
Parameters: id(trigger identifier from URL path), new_uri(updated webhook URL that will receive notifications)
When Not to Use: Don't use for changing event types (delete and recreate trigger instead) or for testing webhooks (use dedicated testing tools). Avoid frequent URL changes as this may disrupt notification delivery.
Output: Returns update confirmation: message(success confirmation - typically "ok")
Example output: {"message": "ok"}
`,
  scopes: ["admin"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await triggersUpdateTrigger(
      client,
      args.id,
      args.requestBody,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
