/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { transformationsCreateTransformation } from "../../funcs/transformationsCreateTransformation.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  transformation: z.string(),
  createRequest: components.CreateRequest$inboundSchema,
};

export const tool$transformationsCreateTransformation: ToolDefinition<
  typeof args
> = {
  name: "create-transformation",
  description:
    `Creates a new named transformation (assigning a custom name to a set of transformation

Creates a new named transformation with the given name and transformation string.
`,
  scopes: ["admin"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await transformationsCreateTransformation(
      client,
      args.transformation,
      args.createRequest,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
