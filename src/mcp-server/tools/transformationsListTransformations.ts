/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { transformationsListTransformations } from "../../funcs/transformationsListTransformations.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  named: z.boolean().optional(),
  maxResults: z.number().int().default(10),
  nextCursor: z.string().optional(),
};

export const tool$transformationsListTransformations: ToolDefinition<
  typeof args
> = {
  name: "list-transformations",
  description:
    `Purpose: Retrieves a comprehensive list of all transformations (both named and unnamed) in your Cloudinary account. Transformations define how images and videos are processed, resized, filtered, or optimized during delivery.
Usage: Use this to audit existing transformations, manage transformation inventory, or discover available transformation templates before creating new ones. Essential for transformation governance and optimization workflows.
Example request: GET /transformations?named=true&max_results=50 (no request body required)
Parameters: named(filter by named/unnamed transformations), max_results(limit response size 1-500), next_cursor(pagination token for additional results)
When Not to Use: Don't use for retrieving a single transformation's details - use get-transformation-details instead. Avoid frequent polling as transformation configurations change infrequently.
Output: Returns array of transformation objects with usage statistics: transformations(array of transformation objects), name(transformation identifier), allowed_for_strict(whether usable in strict mode), used(whether transformation has been applied to assets), derived_resource_count(number of derived resources using this transformation), next_cursor(pagination token if more results available)
Example output: {"transformations":[{"name":"c_fill,w_100,h_150","allowed_for_strict":false,"used":true,"derived_resource_count":15},{"name":"quality_auto","allowed_for_strict":true,"used":true,"derived_resource_count":234}],"next_cursor":"8edbc61040178db60b0973ca9494bf3a"}
`,
  scopes: ["admin"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await transformationsListTransformations(
      client,
      args.named,
      args.maxResults,
      args.nextCursor,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
