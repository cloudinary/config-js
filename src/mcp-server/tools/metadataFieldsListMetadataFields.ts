/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { metadataFieldsListMetadataFields } from "../../funcs/metadataFieldsListMetadataFields.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  externalIds: z.array(z.string()).optional(),
};

export const tool$metadataFieldsListMetadataFields: ToolDefinition<
  typeof args
> = {
  name: "list-metadata-fields",
  description:
    `Purpose: Retrieves a comprehensive list of all structured metadata fields configured in your Cloudinary account, providing the schema and configuration details for each field used to organize and categorize your assets.
Usage: Use this to discover available metadata fields, build dynamic forms, audit metadata configurations, or understand the data structure available for asset organization. Essential for metadata management interfaces and asset organization workflows.
Example request: GET /metadata_fields?external_ids=product_category,brand_name (no request body required)
Parameters: external_ids(filter by specific field identifiers - if not provided, returns all fields)
When Not to Use: Don't use for retrieving a single field's details (use get-metadata-field instead) or for high-frequency polling as metadata schemas change infrequently.
Output: Returns array of metadata field configurations: metadata_fields(array of field objects). Each field contains: external_id(unique identifier), type(field data type), label(human-readable name), mandatory(required status), default_value(default value), datasource(available values for enum/set), validation(field rules), created_at(creation timestamp), updated_at(last modification time)
Example output: {"metadata_fields":[{"external_id":"product_category","type":"string","label":"Product Category","mandatory":false,"default_value":"uncategorized"},{"external_id":"price","type":"integer","label":"Price","mandatory":true}]}
`,
  scopes: ["builder"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await metadataFieldsListMetadataFields(
      client,
      args.externalIds,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
