/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { uploadPresetsUpdateUploadPreset } from "../../funcs/uploadPresetsUpdateUploadPreset.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  name: z.string(),
  uploadPreset: components.UploadPreset$inboundSchema,
};

export const tool$uploadPresetsUpdateUploadPreset: ToolDefinition<typeof args> =
  {
    name: "update-upload-preset",
    description:
      `Purpose: Updates the settings of an existing upload preset. This lets you change parameters like allowed transformations, moderation settings, or whether unsigned uploads are allowed. 
Usage: Use this to modify a preset when requirements change (for example, enabling a new format or altering incoming transformation rules) without creating a new preset. 
Note 1: Should be used carefully, as updating upload_presets may impact existed production flows that uses the upload_preset profile that is being updated. consider creating new one with the modification and then change the production flow to the new one if the intent is to modify a production flow. Note 2: Cannot set overwrite=true for unsigned presets. , Note-3: Uses  this (PUT) method to update existing presets rather than creating new ones.
When Not to Use: Don't use for creating new presets (use create-upload-preset instead). Also, if the preset doesn't exist, you'd need to create it first. 
Output: Returns update confirmation with preset identifier: message(update status), external_id(unique system identifier)
`,
    scopes: ["builder"],
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await uploadPresetsUpdateUploadPreset(
        client,
        args.name,
        args.uploadPreset,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
