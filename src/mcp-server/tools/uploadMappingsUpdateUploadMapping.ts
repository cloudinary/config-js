/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { uploadMappingsUpdateUploadMapping } from "../../funcs/uploadMappingsUpdateUploadMapping.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.UpdateUploadMappingRequest$inboundSchema,
};

export const tool$uploadMappingsUpdateUploadMapping: ToolDefinition<
  typeof args
> = {
  name: "update-upload-mapping",
  description:
    `Purpose: Updates existing URL mappings to modify custom delivery patterns for folders, allowing you to change domain endpoints, URL structures, or routing configurations without recreating the mapping.
Usage: Use this to update branded domains, modify URL patterns for existing folders, fix routing configurations, or migrate to new delivery endpoints while maintaining folder associations. Essential for maintaining current branded delivery setups.
Example request: {"folder": "products", "template": "https://newcdn.mystore.com/assets/{public_id}"}
Parameters: folder(existing folder path), template(updated URL pattern with {public_id} placeholder)
When Not to Use: Avoid updating production mappings without testing the new URLs. Don't change mappings during high-traffic periods as this affects asset delivery.
Output: Returns update confirmation: message(update status), external_id(unique mapping identifier)
Example output: {"message": "updated", "external_id": "mapping_456"}
`,
  scopes: ["builder"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await uploadMappingsUpdateUploadMapping(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
