/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents an upload mapping
 */
export type UploadMapping = {
  /**
   * The folder name
   */
  folder: string;
  /**
   * The template URL
   */
  template: string;
  /**
   * Unique identifier for the mapping
   */
  externalId: string;
  /**
   * Name of an upload preset if one is associated
   */
  uploadPresetName?: string | null | undefined;
};

/** @internal */
export const UploadMapping$inboundSchema: z.ZodType<
  UploadMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder: z.string(),
  template: z.string(),
  external_id: z.string(),
  upload_preset_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "upload_preset_name": "uploadPresetName",
  });
});

/** @internal */
export type UploadMapping$Outbound = {
  folder: string;
  template: string;
  external_id: string;
  upload_preset_name?: string | null | undefined;
};

/** @internal */
export const UploadMapping$outboundSchema: z.ZodType<
  UploadMapping$Outbound,
  z.ZodTypeDef,
  UploadMapping
> = z.object({
  folder: z.string(),
  template: z.string(),
  externalId: z.string(),
  uploadPresetName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    uploadPresetName: "upload_preset_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadMapping$ {
  /** @deprecated use `UploadMapping$inboundSchema` instead. */
  export const inboundSchema = UploadMapping$inboundSchema;
  /** @deprecated use `UploadMapping$outboundSchema` instead. */
  export const outboundSchema = UploadMapping$outboundSchema;
  /** @deprecated use `UploadMapping$Outbound` instead. */
  export type Outbound = UploadMapping$Outbound;
}

export function uploadMappingToJSON(uploadMapping: UploadMapping): string {
  return JSON.stringify(UploadMapping$outboundSchema.parse(uploadMapping));
}

export function uploadMappingFromJSON(
  jsonString: string,
): SafeParseResult<UploadMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadMapping' from JSON`,
  );
}
