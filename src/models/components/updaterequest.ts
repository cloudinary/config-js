/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateRequest = {
  /**
   * Required when modifying the transformation parameters of an existing named transformation. The new transformation definition for the named transformation.
   *
   * @remarks
   * Because the changed definition can be unsafe for (significantly change) assets in production, the change is applied only to newly generated derived assets that reference this named transformation.
   *
   * To apply the change to existing derived assets using this named transformation, invalidate them so that they'll be regenerated with the new definition when next requested.
   */
  unsafeUpdate?: string | undefined;
  /**
   * Whether to allow this named transformation when strict transformations are enabled. Strict transformations prevent transformations from being dynamically applied to media assets.
   *
   * @remarks
   */
  allowedForStrict?: boolean | undefined;
};

/** @internal */
export const UpdateRequest$inboundSchema: z.ZodType<
  UpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  unsafe_update: z.string().optional(),
  allowed_for_strict: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "unsafe_update": "unsafeUpdate",
    "allowed_for_strict": "allowedForStrict",
  });
});

/** @internal */
export type UpdateRequest$Outbound = {
  unsafe_update?: string | undefined;
  allowed_for_strict?: boolean | undefined;
};

/** @internal */
export const UpdateRequest$outboundSchema: z.ZodType<
  UpdateRequest$Outbound,
  z.ZodTypeDef,
  UpdateRequest
> = z.object({
  unsafeUpdate: z.string().optional(),
  allowedForStrict: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    unsafeUpdate: "unsafe_update",
    allowedForStrict: "allowed_for_strict",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRequest$ {
  /** @deprecated use `UpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRequest$inboundSchema;
  /** @deprecated use `UpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRequest$outboundSchema;
  /** @deprecated use `UpdateRequest$Outbound` instead. */
  export type Outbound = UpdateRequest$Outbound;
}

export function updateRequestToJSON(updateRequest: UpdateRequest): string {
  return JSON.stringify(UpdateRequest$outboundSchema.parse(updateRequest));
}

export function updateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRequest' from JSON`,
  );
}
