/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Info = {
  width?: number | undefined;
  height?: number | undefined;
  crop?: string | undefined;
  gravity?: string | undefined;
};

export type Derived = {
  publicId?: string | undefined;
  resourceType?: string | undefined;
  type?: string | undefined;
  format?: string | undefined;
  url?: string | undefined;
  secureUrl?: string | undefined;
  bytes?: number | undefined;
  id?: string | undefined;
};

export type TransformationInfo = {
  name?: string | undefined;
  /**
   * Whether to allow this named transformation when [strict transformations](https://cloudinary.com/documentation/control_access_to_media#strict_transformations) are enabled.
   *
   * @remarks
   */
  allowedForStrict?: boolean | undefined;
  used?: boolean | undefined;
  named?: boolean | undefined;
  /**
   * API transformation parameters
   */
  info?: Array<Info> | undefined;
  derived?: Array<Derived> | undefined;
  nextCursor?: string | undefined;
};

/** @internal */
export const Info$inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown> = z
  .object({
    width: z.number().int().optional(),
    height: z.number().int().optional(),
    crop: z.string().optional(),
    gravity: z.string().optional(),
  });

/** @internal */
export type Info$Outbound = {
  width?: number | undefined;
  height?: number | undefined;
  crop?: string | undefined;
  gravity?: string | undefined;
};

/** @internal */
export const Info$outboundSchema: z.ZodType<Info$Outbound, z.ZodTypeDef, Info> =
  z.object({
    width: z.number().int().optional(),
    height: z.number().int().optional(),
    crop: z.string().optional(),
    gravity: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Info$ {
  /** @deprecated use `Info$inboundSchema` instead. */
  export const inboundSchema = Info$inboundSchema;
  /** @deprecated use `Info$outboundSchema` instead. */
  export const outboundSchema = Info$outboundSchema;
  /** @deprecated use `Info$Outbound` instead. */
  export type Outbound = Info$Outbound;
}

export function infoToJSON(info: Info): string {
  return JSON.stringify(Info$outboundSchema.parse(info));
}

export function infoFromJSON(
  jsonString: string,
): SafeParseResult<Info, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Info$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Info' from JSON`,
  );
}

/** @internal */
export const Derived$inboundSchema: z.ZodType<Derived, z.ZodTypeDef, unknown> =
  z.object({
    public_id: z.string().optional(),
    resource_type: z.string().optional(),
    type: z.string().optional(),
    format: z.string().optional(),
    url: z.string().optional(),
    secure_url: z.string().optional(),
    bytes: z.number().int().optional(),
    id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "public_id": "publicId",
      "resource_type": "resourceType",
      "secure_url": "secureUrl",
    });
  });

/** @internal */
export type Derived$Outbound = {
  public_id?: string | undefined;
  resource_type?: string | undefined;
  type?: string | undefined;
  format?: string | undefined;
  url?: string | undefined;
  secure_url?: string | undefined;
  bytes?: number | undefined;
  id?: string | undefined;
};

/** @internal */
export const Derived$outboundSchema: z.ZodType<
  Derived$Outbound,
  z.ZodTypeDef,
  Derived
> = z.object({
  publicId: z.string().optional(),
  resourceType: z.string().optional(),
  type: z.string().optional(),
  format: z.string().optional(),
  url: z.string().optional(),
  secureUrl: z.string().optional(),
  bytes: z.number().int().optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    publicId: "public_id",
    resourceType: "resource_type",
    secureUrl: "secure_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Derived$ {
  /** @deprecated use `Derived$inboundSchema` instead. */
  export const inboundSchema = Derived$inboundSchema;
  /** @deprecated use `Derived$outboundSchema` instead. */
  export const outboundSchema = Derived$outboundSchema;
  /** @deprecated use `Derived$Outbound` instead. */
  export type Outbound = Derived$Outbound;
}

export function derivedToJSON(derived: Derived): string {
  return JSON.stringify(Derived$outboundSchema.parse(derived));
}

export function derivedFromJSON(
  jsonString: string,
): SafeParseResult<Derived, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Derived$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Derived' from JSON`,
  );
}

/** @internal */
export const TransformationInfo$inboundSchema: z.ZodType<
  TransformationInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  allowed_for_strict: z.boolean().optional(),
  used: z.boolean().optional(),
  named: z.boolean().optional(),
  info: z.array(z.lazy(() => Info$inboundSchema)).optional(),
  derived: z.array(z.lazy(() => Derived$inboundSchema)).optional(),
  next_cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_for_strict": "allowedForStrict",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type TransformationInfo$Outbound = {
  name?: string | undefined;
  allowed_for_strict?: boolean | undefined;
  used?: boolean | undefined;
  named?: boolean | undefined;
  info?: Array<Info$Outbound> | undefined;
  derived?: Array<Derived$Outbound> | undefined;
  next_cursor?: string | undefined;
};

/** @internal */
export const TransformationInfo$outboundSchema: z.ZodType<
  TransformationInfo$Outbound,
  z.ZodTypeDef,
  TransformationInfo
> = z.object({
  name: z.string().optional(),
  allowedForStrict: z.boolean().optional(),
  used: z.boolean().optional(),
  named: z.boolean().optional(),
  info: z.array(z.lazy(() => Info$outboundSchema)).optional(),
  derived: z.array(z.lazy(() => Derived$outboundSchema)).optional(),
  nextCursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    allowedForStrict: "allowed_for_strict",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransformationInfo$ {
  /** @deprecated use `TransformationInfo$inboundSchema` instead. */
  export const inboundSchema = TransformationInfo$inboundSchema;
  /** @deprecated use `TransformationInfo$outboundSchema` instead. */
  export const outboundSchema = TransformationInfo$outboundSchema;
  /** @deprecated use `TransformationInfo$Outbound` instead. */
  export type Outbound = TransformationInfo$Outbound;
}

export function transformationInfoToJSON(
  transformationInfo: TransformationInfo,
): string {
  return JSON.stringify(
    TransformationInfo$outboundSchema.parse(transformationInfo),
  );
}

export function transformationInfoFromJSON(
  jsonString: string,
): SafeParseResult<TransformationInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransformationInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransformationInfo' from JSON`,
  );
}
