/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StreamingProfileUpdate = {
  /**
   * The display name of the streaming profile
   */
  displayName?: string | undefined;
  /**
   * A JSON string containing the list of representations with transformation parameters as strings
   */
  representations: string;
};

/** @internal */
export const StreamingProfileUpdate$inboundSchema: z.ZodType<
  StreamingProfileUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string().optional(),
  representations: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type StreamingProfileUpdate$Outbound = {
  display_name?: string | undefined;
  representations: string;
};

/** @internal */
export const StreamingProfileUpdate$outboundSchema: z.ZodType<
  StreamingProfileUpdate$Outbound,
  z.ZodTypeDef,
  StreamingProfileUpdate
> = z.object({
  displayName: z.string().optional(),
  representations: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamingProfileUpdate$ {
  /** @deprecated use `StreamingProfileUpdate$inboundSchema` instead. */
  export const inboundSchema = StreamingProfileUpdate$inboundSchema;
  /** @deprecated use `StreamingProfileUpdate$outboundSchema` instead. */
  export const outboundSchema = StreamingProfileUpdate$outboundSchema;
  /** @deprecated use `StreamingProfileUpdate$Outbound` instead. */
  export type Outbound = StreamingProfileUpdate$Outbound;
}

export function streamingProfileUpdateToJSON(
  streamingProfileUpdate: StreamingProfileUpdate,
): string {
  return JSON.stringify(
    StreamingProfileUpdate$outboundSchema.parse(streamingProfileUpdate),
  );
}

export function streamingProfileUpdateFromJSON(
  jsonString: string,
): SafeParseResult<StreamingProfileUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamingProfileUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamingProfileUpdate' from JSON`,
  );
}
