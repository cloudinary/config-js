/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransformationSummary,
  TransformationSummary$inboundSchema,
  TransformationSummary$Outbound,
  TransformationSummary$outboundSchema,
} from "./transformationsummary.js";

export type ListResponse = {
  transformations?: Array<TransformationSummary> | undefined;
  nextCursor?: string | null | undefined;
};

/** @internal */
export const ListResponse$inboundSchema: z.ZodType<
  ListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  transformations: z.array(TransformationSummary$inboundSchema).optional(),
  next_cursor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListResponse$Outbound = {
  transformations?: Array<TransformationSummary$Outbound> | undefined;
  next_cursor?: string | null | undefined;
};

/** @internal */
export const ListResponse$outboundSchema: z.ZodType<
  ListResponse$Outbound,
  z.ZodTypeDef,
  ListResponse
> = z.object({
  transformations: z.array(TransformationSummary$outboundSchema).optional(),
  nextCursor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListResponse$ {
  /** @deprecated use `ListResponse$inboundSchema` instead. */
  export const inboundSchema = ListResponse$inboundSchema;
  /** @deprecated use `ListResponse$outboundSchema` instead. */
  export const outboundSchema = ListResponse$outboundSchema;
  /** @deprecated use `ListResponse$Outbound` instead. */
  export type Outbound = ListResponse$Outbound;
}

export function listResponseToJSON(listResponse: ListResponse): string {
  return JSON.stringify(ListResponse$outboundSchema.parse(listResponse));
}

export function listResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListResponse' from JSON`,
  );
}
