/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UriType,
  UriType$inboundSchema,
  UriType$outboundSchema,
} from "./uritype.js";

export type TriggerInfo = {
  id?: string | undefined;
  productEnvironmentId?: string | undefined;
  uriType: UriType;
  uri: string;
  eventType?: string | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
};

/** @internal */
export const TriggerInfo$inboundSchema: z.ZodType<
  TriggerInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  product_environment_id: z.string().optional(),
  uri_type: UriType$inboundSchema,
  uri: z.string(),
  event_type: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "product_environment_id": "productEnvironmentId",
    "uri_type": "uriType",
    "event_type": "eventType",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type TriggerInfo$Outbound = {
  id?: string | undefined;
  product_environment_id?: string | undefined;
  uri_type: string;
  uri: string;
  event_type?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const TriggerInfo$outboundSchema: z.ZodType<
  TriggerInfo$Outbound,
  z.ZodTypeDef,
  TriggerInfo
> = z.object({
  id: z.string().optional(),
  productEnvironmentId: z.string().optional(),
  uriType: UriType$outboundSchema,
  uri: z.string(),
  eventType: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    productEnvironmentId: "product_environment_id",
    uriType: "uri_type",
    eventType: "event_type",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerInfo$ {
  /** @deprecated use `TriggerInfo$inboundSchema` instead. */
  export const inboundSchema = TriggerInfo$inboundSchema;
  /** @deprecated use `TriggerInfo$outboundSchema` instead. */
  export const outboundSchema = TriggerInfo$outboundSchema;
  /** @deprecated use `TriggerInfo$Outbound` instead. */
  export type Outbound = TriggerInfo$Outbound;
}

export function triggerInfoToJSON(triggerInfo: TriggerInfo): string {
  return JSON.stringify(TriggerInfo$outboundSchema.parse(triggerInfo));
}

export function triggerInfoFromJSON(
  jsonString: string,
): SafeParseResult<TriggerInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerInfo' from JSON`,
  );
}
