/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TransformationSummary = {
  name?: string | undefined;
  allowedForStrict?: boolean | undefined;
  used?: boolean | undefined;
  named?: boolean | undefined;
};

/** @internal */
export const TransformationSummary$inboundSchema: z.ZodType<
  TransformationSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  allowed_for_strict: z.boolean().optional(),
  used: z.boolean().optional(),
  named: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "allowed_for_strict": "allowedForStrict",
  });
});

/** @internal */
export type TransformationSummary$Outbound = {
  name?: string | undefined;
  allowed_for_strict?: boolean | undefined;
  used?: boolean | undefined;
  named?: boolean | undefined;
};

/** @internal */
export const TransformationSummary$outboundSchema: z.ZodType<
  TransformationSummary$Outbound,
  z.ZodTypeDef,
  TransformationSummary
> = z.object({
  name: z.string().optional(),
  allowedForStrict: z.boolean().optional(),
  used: z.boolean().optional(),
  named: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    allowedForStrict: "allowed_for_strict",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransformationSummary$ {
  /** @deprecated use `TransformationSummary$inboundSchema` instead. */
  export const inboundSchema = TransformationSummary$inboundSchema;
  /** @deprecated use `TransformationSummary$outboundSchema` instead. */
  export const outboundSchema = TransformationSummary$outboundSchema;
  /** @deprecated use `TransformationSummary$Outbound` instead. */
  export type Outbound = TransformationSummary$Outbound;
}

export function transformationSummaryToJSON(
  transformationSummary: TransformationSummary,
): string {
  return JSON.stringify(
    TransformationSummary$outboundSchema.parse(transformationSummary),
  );
}

export function transformationSummaryFromJSON(
  jsonString: string,
): SafeParseResult<TransformationSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransformationSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransformationSummary' from JSON`,
  );
}
