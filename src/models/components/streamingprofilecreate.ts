/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StreamingProfileCreate = {
  /**
   * The name of the streaming profile
   */
  name: string;
  /**
   * The display name of the streaming profile
   */
  displayName?: string | undefined;
  /**
   * A JSON string containing the list of representations with transformation parameters as strings
   */
  representations: string;
};

/** @internal */
export const StreamingProfileCreate$inboundSchema: z.ZodType<
  StreamingProfileCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  display_name: z.string().optional(),
  representations: z.string(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type StreamingProfileCreate$Outbound = {
  name: string;
  display_name?: string | undefined;
  representations: string;
};

/** @internal */
export const StreamingProfileCreate$outboundSchema: z.ZodType<
  StreamingProfileCreate$Outbound,
  z.ZodTypeDef,
  StreamingProfileCreate
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  representations: z.string(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamingProfileCreate$ {
  /** @deprecated use `StreamingProfileCreate$inboundSchema` instead. */
  export const inboundSchema = StreamingProfileCreate$inboundSchema;
  /** @deprecated use `StreamingProfileCreate$outboundSchema` instead. */
  export const outboundSchema = StreamingProfileCreate$outboundSchema;
  /** @deprecated use `StreamingProfileCreate$Outbound` instead. */
  export type Outbound = StreamingProfileCreate$Outbound;
}

export function streamingProfileCreateToJSON(
  streamingProfileCreate: StreamingProfileCreate,
): string {
  return JSON.stringify(
    StreamingProfileCreate$outboundSchema.parse(streamingProfileCreate),
  );
}

export function streamingProfileCreateFromJSON(
  jsonString: string,
): SafeParseResult<StreamingProfileCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamingProfileCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamingProfileCreate' from JSON`,
  );
}
