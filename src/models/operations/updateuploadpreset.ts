/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateUploadPresetGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type UpdateUploadPresetRequest = {
  name: string;
  uploadPreset: components.UploadPreset;
};

/**
 * upload preset updated
 */
export type UpdateUploadPresetResponse = {
  message: string;
  externalId: string;
};

/** @internal */
export const UpdateUploadPresetGlobals$inboundSchema: z.ZodType<
  UpdateUploadPresetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UpdateUploadPresetGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UpdateUploadPresetGlobals$outboundSchema: z.ZodType<
  UpdateUploadPresetGlobals$Outbound,
  z.ZodTypeDef,
  UpdateUploadPresetGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUploadPresetGlobals$ {
  /** @deprecated use `UpdateUploadPresetGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateUploadPresetGlobals$inboundSchema;
  /** @deprecated use `UpdateUploadPresetGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateUploadPresetGlobals$outboundSchema;
  /** @deprecated use `UpdateUploadPresetGlobals$Outbound` instead. */
  export type Outbound = UpdateUploadPresetGlobals$Outbound;
}

export function updateUploadPresetGlobalsToJSON(
  updateUploadPresetGlobals: UpdateUploadPresetGlobals,
): string {
  return JSON.stringify(
    UpdateUploadPresetGlobals$outboundSchema.parse(updateUploadPresetGlobals),
  );
}

export function updateUploadPresetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUploadPresetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUploadPresetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUploadPresetGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateUploadPresetRequest$inboundSchema: z.ZodType<
  UpdateUploadPresetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  upload_preset: components.UploadPreset$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "upload_preset": "uploadPreset",
  });
});

/** @internal */
export type UpdateUploadPresetRequest$Outbound = {
  name: string;
  upload_preset: components.UploadPreset$Outbound;
};

/** @internal */
export const UpdateUploadPresetRequest$outboundSchema: z.ZodType<
  UpdateUploadPresetRequest$Outbound,
  z.ZodTypeDef,
  UpdateUploadPresetRequest
> = z.object({
  name: z.string(),
  uploadPreset: components.UploadPreset$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    uploadPreset: "upload_preset",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUploadPresetRequest$ {
  /** @deprecated use `UpdateUploadPresetRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUploadPresetRequest$inboundSchema;
  /** @deprecated use `UpdateUploadPresetRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUploadPresetRequest$outboundSchema;
  /** @deprecated use `UpdateUploadPresetRequest$Outbound` instead. */
  export type Outbound = UpdateUploadPresetRequest$Outbound;
}

export function updateUploadPresetRequestToJSON(
  updateUploadPresetRequest: UpdateUploadPresetRequest,
): string {
  return JSON.stringify(
    UpdateUploadPresetRequest$outboundSchema.parse(updateUploadPresetRequest),
  );
}

export function updateUploadPresetRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUploadPresetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUploadPresetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUploadPresetRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUploadPresetResponse$inboundSchema: z.ZodType<
  UpdateUploadPresetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  external_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type UpdateUploadPresetResponse$Outbound = {
  message: string;
  external_id: string;
};

/** @internal */
export const UpdateUploadPresetResponse$outboundSchema: z.ZodType<
  UpdateUploadPresetResponse$Outbound,
  z.ZodTypeDef,
  UpdateUploadPresetResponse
> = z.object({
  message: z.string(),
  externalId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUploadPresetResponse$ {
  /** @deprecated use `UpdateUploadPresetResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUploadPresetResponse$inboundSchema;
  /** @deprecated use `UpdateUploadPresetResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUploadPresetResponse$outboundSchema;
  /** @deprecated use `UpdateUploadPresetResponse$Outbound` instead. */
  export type Outbound = UpdateUploadPresetResponse$Outbound;
}

export function updateUploadPresetResponseToJSON(
  updateUploadPresetResponse: UpdateUploadPresetResponse,
): string {
  return JSON.stringify(
    UpdateUploadPresetResponse$outboundSchema.parse(updateUploadPresetResponse),
  );
}

export function updateUploadPresetResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUploadPresetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUploadPresetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUploadPresetResponse' from JSON`,
  );
}
