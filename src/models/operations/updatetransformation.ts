/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTransformationGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type UpdateTransformationRequest = {
  /**
   * The transformation identifier. Can be either a named transformation (e.g., 'small_profile_thumbnail') or a transformation string (e.g., 'w_100,h_150,c_fill,g_auto').
   *
   * @remarks
   */
  transformation: string;
  updateRequest: components.UpdateRequest;
};

/**
 * Transformation updated
 */
export type UpdateTransformationResponse = {
  message?: string | undefined;
};

/** @internal */
export const UpdateTransformationGlobals$inboundSchema: z.ZodType<
  UpdateTransformationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UpdateTransformationGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UpdateTransformationGlobals$outboundSchema: z.ZodType<
  UpdateTransformationGlobals$Outbound,
  z.ZodTypeDef,
  UpdateTransformationGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransformationGlobals$ {
  /** @deprecated use `UpdateTransformationGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateTransformationGlobals$inboundSchema;
  /** @deprecated use `UpdateTransformationGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateTransformationGlobals$outboundSchema;
  /** @deprecated use `UpdateTransformationGlobals$Outbound` instead. */
  export type Outbound = UpdateTransformationGlobals$Outbound;
}

export function updateTransformationGlobalsToJSON(
  updateTransformationGlobals: UpdateTransformationGlobals,
): string {
  return JSON.stringify(
    UpdateTransformationGlobals$outboundSchema.parse(
      updateTransformationGlobals,
    ),
  );
}

export function updateTransformationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransformationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransformationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransformationGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateTransformationRequest$inboundSchema: z.ZodType<
  UpdateTransformationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transformation: z.string(),
  update_request: components.UpdateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "update_request": "updateRequest",
  });
});

/** @internal */
export type UpdateTransformationRequest$Outbound = {
  transformation: string;
  update_request: components.UpdateRequest$Outbound;
};

/** @internal */
export const UpdateTransformationRequest$outboundSchema: z.ZodType<
  UpdateTransformationRequest$Outbound,
  z.ZodTypeDef,
  UpdateTransformationRequest
> = z.object({
  transformation: z.string(),
  updateRequest: components.UpdateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateRequest: "update_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransformationRequest$ {
  /** @deprecated use `UpdateTransformationRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTransformationRequest$inboundSchema;
  /** @deprecated use `UpdateTransformationRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTransformationRequest$outboundSchema;
  /** @deprecated use `UpdateTransformationRequest$Outbound` instead. */
  export type Outbound = UpdateTransformationRequest$Outbound;
}

export function updateTransformationRequestToJSON(
  updateTransformationRequest: UpdateTransformationRequest,
): string {
  return JSON.stringify(
    UpdateTransformationRequest$outboundSchema.parse(
      updateTransformationRequest,
    ),
  );
}

export function updateTransformationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransformationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransformationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransformationRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTransformationResponse$inboundSchema: z.ZodType<
  UpdateTransformationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type UpdateTransformationResponse$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const UpdateTransformationResponse$outboundSchema: z.ZodType<
  UpdateTransformationResponse$Outbound,
  z.ZodTypeDef,
  UpdateTransformationResponse
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransformationResponse$ {
  /** @deprecated use `UpdateTransformationResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTransformationResponse$inboundSchema;
  /** @deprecated use `UpdateTransformationResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTransformationResponse$outboundSchema;
  /** @deprecated use `UpdateTransformationResponse$Outbound` instead. */
  export type Outbound = UpdateTransformationResponse$Outbound;
}

export function updateTransformationResponseToJSON(
  updateTransformationResponse: UpdateTransformationResponse,
): string {
  return JSON.stringify(
    UpdateTransformationResponse$outboundSchema.parse(
      updateTransformationResponse,
    ),
  );
}

export function updateTransformationResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransformationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransformationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransformationResponse' from JSON`,
  );
}
