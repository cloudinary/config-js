/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteUploadPresetGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteUploadPresetRequest = {
  name: string;
};

/**
 * upload preset deleted
 */
export type DeleteUploadPresetResponse = {
  message: string;
  externalId: string;
};

/** @internal */
export const DeleteUploadPresetGlobals$inboundSchema: z.ZodType<
  DeleteUploadPresetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteUploadPresetGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteUploadPresetGlobals$outboundSchema: z.ZodType<
  DeleteUploadPresetGlobals$Outbound,
  z.ZodTypeDef,
  DeleteUploadPresetGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteUploadPresetGlobals$ {
  /** @deprecated use `DeleteUploadPresetGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteUploadPresetGlobals$inboundSchema;
  /** @deprecated use `DeleteUploadPresetGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteUploadPresetGlobals$outboundSchema;
  /** @deprecated use `DeleteUploadPresetGlobals$Outbound` instead. */
  export type Outbound = DeleteUploadPresetGlobals$Outbound;
}

export function deleteUploadPresetGlobalsToJSON(
  deleteUploadPresetGlobals: DeleteUploadPresetGlobals,
): string {
  return JSON.stringify(
    DeleteUploadPresetGlobals$outboundSchema.parse(deleteUploadPresetGlobals),
  );
}

export function deleteUploadPresetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteUploadPresetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteUploadPresetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteUploadPresetGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteUploadPresetRequest$inboundSchema: z.ZodType<
  DeleteUploadPresetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type DeleteUploadPresetRequest$Outbound = {
  name: string;
};

/** @internal */
export const DeleteUploadPresetRequest$outboundSchema: z.ZodType<
  DeleteUploadPresetRequest$Outbound,
  z.ZodTypeDef,
  DeleteUploadPresetRequest
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteUploadPresetRequest$ {
  /** @deprecated use `DeleteUploadPresetRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteUploadPresetRequest$inboundSchema;
  /** @deprecated use `DeleteUploadPresetRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteUploadPresetRequest$outboundSchema;
  /** @deprecated use `DeleteUploadPresetRequest$Outbound` instead. */
  export type Outbound = DeleteUploadPresetRequest$Outbound;
}

export function deleteUploadPresetRequestToJSON(
  deleteUploadPresetRequest: DeleteUploadPresetRequest,
): string {
  return JSON.stringify(
    DeleteUploadPresetRequest$outboundSchema.parse(deleteUploadPresetRequest),
  );
}

export function deleteUploadPresetRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteUploadPresetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteUploadPresetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteUploadPresetRequest' from JSON`,
  );
}

/** @internal */
export const DeleteUploadPresetResponse$inboundSchema: z.ZodType<
  DeleteUploadPresetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  external_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type DeleteUploadPresetResponse$Outbound = {
  message: string;
  external_id: string;
};

/** @internal */
export const DeleteUploadPresetResponse$outboundSchema: z.ZodType<
  DeleteUploadPresetResponse$Outbound,
  z.ZodTypeDef,
  DeleteUploadPresetResponse
> = z.object({
  message: z.string(),
  externalId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteUploadPresetResponse$ {
  /** @deprecated use `DeleteUploadPresetResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteUploadPresetResponse$inboundSchema;
  /** @deprecated use `DeleteUploadPresetResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteUploadPresetResponse$outboundSchema;
  /** @deprecated use `DeleteUploadPresetResponse$Outbound` instead. */
  export type Outbound = DeleteUploadPresetResponse$Outbound;
}

export function deleteUploadPresetResponseToJSON(
  deleteUploadPresetResponse: DeleteUploadPresetResponse,
): string {
  return JSON.stringify(
    DeleteUploadPresetResponse$outboundSchema.parse(deleteUploadPresetResponse),
  );
}

export function deleteUploadPresetResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteUploadPresetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteUploadPresetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteUploadPresetResponse' from JSON`,
  );
}
