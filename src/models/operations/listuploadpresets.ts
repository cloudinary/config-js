/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListUploadPresetsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export const OrderBy = {
  Name: "name",
  Id: "id",
  UpdatedAt: "updated_at",
} as const;
export type OrderBy = ClosedEnum<typeof OrderBy>;

export const Direction = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type Direction = ClosedEnum<typeof Direction>;

export type ListUploadPresetsRequest = {
  orderBy?: OrderBy | undefined;
  direction?: Direction | undefined;
  nextCursor?: number | undefined;
};

/**
 * upload presets retrieved
 */
export type ListUploadPresetsResponse = {
  presets: Array<components.UploadPreset>;
};

/** @internal */
export const ListUploadPresetsGlobals$inboundSchema: z.ZodType<
  ListUploadPresetsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListUploadPresetsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListUploadPresetsGlobals$outboundSchema: z.ZodType<
  ListUploadPresetsGlobals$Outbound,
  z.ZodTypeDef,
  ListUploadPresetsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUploadPresetsGlobals$ {
  /** @deprecated use `ListUploadPresetsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListUploadPresetsGlobals$inboundSchema;
  /** @deprecated use `ListUploadPresetsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListUploadPresetsGlobals$outboundSchema;
  /** @deprecated use `ListUploadPresetsGlobals$Outbound` instead. */
  export type Outbound = ListUploadPresetsGlobals$Outbound;
}

export function listUploadPresetsGlobalsToJSON(
  listUploadPresetsGlobals: ListUploadPresetsGlobals,
): string {
  return JSON.stringify(
    ListUploadPresetsGlobals$outboundSchema.parse(listUploadPresetsGlobals),
  );
}

export function listUploadPresetsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListUploadPresetsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUploadPresetsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUploadPresetsGlobals' from JSON`,
  );
}

/** @internal */
export const OrderBy$inboundSchema: z.ZodNativeEnum<typeof OrderBy> = z
  .nativeEnum(OrderBy);

/** @internal */
export const OrderBy$outboundSchema: z.ZodNativeEnum<typeof OrderBy> =
  OrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderBy$ {
  /** @deprecated use `OrderBy$inboundSchema` instead. */
  export const inboundSchema = OrderBy$inboundSchema;
  /** @deprecated use `OrderBy$outboundSchema` instead. */
  export const outboundSchema = OrderBy$outboundSchema;
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const ListUploadPresetsRequest$inboundSchema: z.ZodType<
  ListUploadPresetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  order_by: OrderBy$inboundSchema.optional(),
  direction: Direction$inboundSchema.optional(),
  next_cursor: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "order_by": "orderBy",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListUploadPresetsRequest$Outbound = {
  order_by?: string | undefined;
  direction?: string | undefined;
  next_cursor?: number | undefined;
};

/** @internal */
export const ListUploadPresetsRequest$outboundSchema: z.ZodType<
  ListUploadPresetsRequest$Outbound,
  z.ZodTypeDef,
  ListUploadPresetsRequest
> = z.object({
  orderBy: OrderBy$outboundSchema.optional(),
  direction: Direction$outboundSchema.optional(),
  nextCursor: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    orderBy: "order_by",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUploadPresetsRequest$ {
  /** @deprecated use `ListUploadPresetsRequest$inboundSchema` instead. */
  export const inboundSchema = ListUploadPresetsRequest$inboundSchema;
  /** @deprecated use `ListUploadPresetsRequest$outboundSchema` instead. */
  export const outboundSchema = ListUploadPresetsRequest$outboundSchema;
  /** @deprecated use `ListUploadPresetsRequest$Outbound` instead. */
  export type Outbound = ListUploadPresetsRequest$Outbound;
}

export function listUploadPresetsRequestToJSON(
  listUploadPresetsRequest: ListUploadPresetsRequest,
): string {
  return JSON.stringify(
    ListUploadPresetsRequest$outboundSchema.parse(listUploadPresetsRequest),
  );
}

export function listUploadPresetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListUploadPresetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUploadPresetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUploadPresetsRequest' from JSON`,
  );
}

/** @internal */
export const ListUploadPresetsResponse$inboundSchema: z.ZodType<
  ListUploadPresetsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  presets: z.array(components.UploadPreset$inboundSchema),
});

/** @internal */
export type ListUploadPresetsResponse$Outbound = {
  presets: Array<components.UploadPreset$Outbound>;
};

/** @internal */
export const ListUploadPresetsResponse$outboundSchema: z.ZodType<
  ListUploadPresetsResponse$Outbound,
  z.ZodTypeDef,
  ListUploadPresetsResponse
> = z.object({
  presets: z.array(components.UploadPreset$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUploadPresetsResponse$ {
  /** @deprecated use `ListUploadPresetsResponse$inboundSchema` instead. */
  export const inboundSchema = ListUploadPresetsResponse$inboundSchema;
  /** @deprecated use `ListUploadPresetsResponse$outboundSchema` instead. */
  export const outboundSchema = ListUploadPresetsResponse$outboundSchema;
  /** @deprecated use `ListUploadPresetsResponse$Outbound` instead. */
  export type Outbound = ListUploadPresetsResponse$Outbound;
}

export function listUploadPresetsResponseToJSON(
  listUploadPresetsResponse: ListUploadPresetsResponse,
): string {
  return JSON.stringify(
    ListUploadPresetsResponse$outboundSchema.parse(listUploadPresetsResponse),
  );
}

export function listUploadPresetsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListUploadPresetsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUploadPresetsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUploadPresetsResponse' from JSON`,
  );
}
