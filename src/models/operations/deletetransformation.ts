/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTransformationGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteTransformationRequest = {
  /**
   * The transformation identifier. Can be either a named transformation (e.g., 'small_profile_thumbnail') or a transformation string (e.g., 'w_100,h_150,c_fill,g_auto').
   *
   * @remarks
   */
  transformation: string;
  /**
   * Invalidate derived resources generated using the deleted transformation from CDN.
   */
  invalidate?: boolean | undefined;
};

/**
 * Transformation deleted
 */
export type DeleteTransformationResponse = {
  message?: string | undefined;
};

/** @internal */
export const DeleteTransformationGlobals$inboundSchema: z.ZodType<
  DeleteTransformationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteTransformationGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteTransformationGlobals$outboundSchema: z.ZodType<
  DeleteTransformationGlobals$Outbound,
  z.ZodTypeDef,
  DeleteTransformationGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTransformationGlobals$ {
  /** @deprecated use `DeleteTransformationGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteTransformationGlobals$inboundSchema;
  /** @deprecated use `DeleteTransformationGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteTransformationGlobals$outboundSchema;
  /** @deprecated use `DeleteTransformationGlobals$Outbound` instead. */
  export type Outbound = DeleteTransformationGlobals$Outbound;
}

export function deleteTransformationGlobalsToJSON(
  deleteTransformationGlobals: DeleteTransformationGlobals,
): string {
  return JSON.stringify(
    DeleteTransformationGlobals$outboundSchema.parse(
      deleteTransformationGlobals,
    ),
  );
}

export function deleteTransformationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTransformationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTransformationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTransformationGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteTransformationRequest$inboundSchema: z.ZodType<
  DeleteTransformationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transformation: z.string(),
  invalidate: z.boolean().optional(),
});

/** @internal */
export type DeleteTransformationRequest$Outbound = {
  transformation: string;
  invalidate?: boolean | undefined;
};

/** @internal */
export const DeleteTransformationRequest$outboundSchema: z.ZodType<
  DeleteTransformationRequest$Outbound,
  z.ZodTypeDef,
  DeleteTransformationRequest
> = z.object({
  transformation: z.string(),
  invalidate: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTransformationRequest$ {
  /** @deprecated use `DeleteTransformationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTransformationRequest$inboundSchema;
  /** @deprecated use `DeleteTransformationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTransformationRequest$outboundSchema;
  /** @deprecated use `DeleteTransformationRequest$Outbound` instead. */
  export type Outbound = DeleteTransformationRequest$Outbound;
}

export function deleteTransformationRequestToJSON(
  deleteTransformationRequest: DeleteTransformationRequest,
): string {
  return JSON.stringify(
    DeleteTransformationRequest$outboundSchema.parse(
      deleteTransformationRequest,
    ),
  );
}

export function deleteTransformationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTransformationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTransformationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTransformationRequest' from JSON`,
  );
}

/** @internal */
export const DeleteTransformationResponse$inboundSchema: z.ZodType<
  DeleteTransformationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type DeleteTransformationResponse$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const DeleteTransformationResponse$outboundSchema: z.ZodType<
  DeleteTransformationResponse$Outbound,
  z.ZodTypeDef,
  DeleteTransformationResponse
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTransformationResponse$ {
  /** @deprecated use `DeleteTransformationResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteTransformationResponse$inboundSchema;
  /** @deprecated use `DeleteTransformationResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteTransformationResponse$outboundSchema;
  /** @deprecated use `DeleteTransformationResponse$Outbound` instead. */
  export type Outbound = DeleteTransformationResponse$Outbound;
}

export function deleteTransformationResponseToJSON(
  deleteTransformationResponse: DeleteTransformationResponse,
): string {
  return JSON.stringify(
    DeleteTransformationResponse$outboundSchema.parse(
      deleteTransformationResponse,
    ),
  );
}

export function deleteTransformationResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTransformationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTransformationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTransformationResponse' from JSON`,
  );
}
