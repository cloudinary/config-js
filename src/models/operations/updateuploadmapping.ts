/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateUploadMappingGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type UpdateUploadMappingRequest = {
  /**
   * The folder name of the mapping to update
   */
  folder: string;
  /**
   * The new URL template
   */
  template: string;
};

/**
 * Upload mapping updated successfully
 */
export type UpdateUploadMappingResponse = {
  message: string;
  /**
   * Unique identifier of the updated mapping
   */
  externalId: string;
};

/** @internal */
export const UpdateUploadMappingGlobals$inboundSchema: z.ZodType<
  UpdateUploadMappingGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UpdateUploadMappingGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UpdateUploadMappingGlobals$outboundSchema: z.ZodType<
  UpdateUploadMappingGlobals$Outbound,
  z.ZodTypeDef,
  UpdateUploadMappingGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUploadMappingGlobals$ {
  /** @deprecated use `UpdateUploadMappingGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateUploadMappingGlobals$inboundSchema;
  /** @deprecated use `UpdateUploadMappingGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateUploadMappingGlobals$outboundSchema;
  /** @deprecated use `UpdateUploadMappingGlobals$Outbound` instead. */
  export type Outbound = UpdateUploadMappingGlobals$Outbound;
}

export function updateUploadMappingGlobalsToJSON(
  updateUploadMappingGlobals: UpdateUploadMappingGlobals,
): string {
  return JSON.stringify(
    UpdateUploadMappingGlobals$outboundSchema.parse(updateUploadMappingGlobals),
  );
}

export function updateUploadMappingGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUploadMappingGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUploadMappingGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUploadMappingGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateUploadMappingRequest$inboundSchema: z.ZodType<
  UpdateUploadMappingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder: z.string(),
  template: z.string(),
});

/** @internal */
export type UpdateUploadMappingRequest$Outbound = {
  folder: string;
  template: string;
};

/** @internal */
export const UpdateUploadMappingRequest$outboundSchema: z.ZodType<
  UpdateUploadMappingRequest$Outbound,
  z.ZodTypeDef,
  UpdateUploadMappingRequest
> = z.object({
  folder: z.string(),
  template: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUploadMappingRequest$ {
  /** @deprecated use `UpdateUploadMappingRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUploadMappingRequest$inboundSchema;
  /** @deprecated use `UpdateUploadMappingRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUploadMappingRequest$outboundSchema;
  /** @deprecated use `UpdateUploadMappingRequest$Outbound` instead. */
  export type Outbound = UpdateUploadMappingRequest$Outbound;
}

export function updateUploadMappingRequestToJSON(
  updateUploadMappingRequest: UpdateUploadMappingRequest,
): string {
  return JSON.stringify(
    UpdateUploadMappingRequest$outboundSchema.parse(updateUploadMappingRequest),
  );
}

export function updateUploadMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUploadMappingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUploadMappingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUploadMappingRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUploadMappingResponse$inboundSchema: z.ZodType<
  UpdateUploadMappingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  external_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type UpdateUploadMappingResponse$Outbound = {
  message: string;
  external_id: string;
};

/** @internal */
export const UpdateUploadMappingResponse$outboundSchema: z.ZodType<
  UpdateUploadMappingResponse$Outbound,
  z.ZodTypeDef,
  UpdateUploadMappingResponse
> = z.object({
  message: z.string(),
  externalId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUploadMappingResponse$ {
  /** @deprecated use `UpdateUploadMappingResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUploadMappingResponse$inboundSchema;
  /** @deprecated use `UpdateUploadMappingResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUploadMappingResponse$outboundSchema;
  /** @deprecated use `UpdateUploadMappingResponse$Outbound` instead. */
  export type Outbound = UpdateUploadMappingResponse$Outbound;
}

export function updateUploadMappingResponseToJSON(
  updateUploadMappingResponse: UpdateUploadMappingResponse,
): string {
  return JSON.stringify(
    UpdateUploadMappingResponse$outboundSchema.parse(
      updateUploadMappingResponse,
    ),
  );
}

export function updateUploadMappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUploadMappingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUploadMappingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUploadMappingResponse' from JSON`,
  );
}
