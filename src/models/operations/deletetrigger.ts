/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTriggerGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteTriggerRequest = {
  id: string;
};

/**
 * Trigger deleted successfully
 */
export type DeleteTriggerResponse = {
  message: string;
};

/** @internal */
export const DeleteTriggerGlobals$inboundSchema: z.ZodType<
  DeleteTriggerGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteTriggerGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteTriggerGlobals$outboundSchema: z.ZodType<
  DeleteTriggerGlobals$Outbound,
  z.ZodTypeDef,
  DeleteTriggerGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTriggerGlobals$ {
  /** @deprecated use `DeleteTriggerGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteTriggerGlobals$inboundSchema;
  /** @deprecated use `DeleteTriggerGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteTriggerGlobals$outboundSchema;
  /** @deprecated use `DeleteTriggerGlobals$Outbound` instead. */
  export type Outbound = DeleteTriggerGlobals$Outbound;
}

export function deleteTriggerGlobalsToJSON(
  deleteTriggerGlobals: DeleteTriggerGlobals,
): string {
  return JSON.stringify(
    DeleteTriggerGlobals$outboundSchema.parse(deleteTriggerGlobals),
  );
}

export function deleteTriggerGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTriggerGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTriggerGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTriggerGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteTriggerRequest$inboundSchema: z.ZodType<
  DeleteTriggerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteTriggerRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteTriggerRequest$outboundSchema: z.ZodType<
  DeleteTriggerRequest$Outbound,
  z.ZodTypeDef,
  DeleteTriggerRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTriggerRequest$ {
  /** @deprecated use `DeleteTriggerRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTriggerRequest$inboundSchema;
  /** @deprecated use `DeleteTriggerRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTriggerRequest$outboundSchema;
  /** @deprecated use `DeleteTriggerRequest$Outbound` instead. */
  export type Outbound = DeleteTriggerRequest$Outbound;
}

export function deleteTriggerRequestToJSON(
  deleteTriggerRequest: DeleteTriggerRequest,
): string {
  return JSON.stringify(
    DeleteTriggerRequest$outboundSchema.parse(deleteTriggerRequest),
  );
}

export function deleteTriggerRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTriggerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTriggerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTriggerRequest' from JSON`,
  );
}

/** @internal */
export const DeleteTriggerResponse$inboundSchema: z.ZodType<
  DeleteTriggerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DeleteTriggerResponse$Outbound = {
  message: string;
};

/** @internal */
export const DeleteTriggerResponse$outboundSchema: z.ZodType<
  DeleteTriggerResponse$Outbound,
  z.ZodTypeDef,
  DeleteTriggerResponse
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTriggerResponse$ {
  /** @deprecated use `DeleteTriggerResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteTriggerResponse$inboundSchema;
  /** @deprecated use `DeleteTriggerResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteTriggerResponse$outboundSchema;
  /** @deprecated use `DeleteTriggerResponse$Outbound` instead. */
  export type Outbound = DeleteTriggerResponse$Outbound;
}

export function deleteTriggerResponseToJSON(
  deleteTriggerResponse: DeleteTriggerResponse,
): string {
  return JSON.stringify(
    DeleteTriggerResponse$outboundSchema.parse(deleteTriggerResponse),
  );
}

export function deleteTriggerResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTriggerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTriggerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTriggerResponse' from JSON`,
  );
}
