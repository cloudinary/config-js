/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListUploadMappingsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ListUploadMappingsRequest = {
  /**
   * Get details of a specific mapping by folder name
   */
  folder?: string | undefined;
  /**
   * For pagination - value from the previous response to get the next page of results
   */
  nextCursor?: string | undefined;
  /**
   * Maximum number of results to return per request (1-500)
   */
  maxResults?: number | undefined;
};

/**
 * List response
 */
export type ResponseBody = {
  /**
   * Array of upload mapping objects
   */
  mappings: Array<components.UploadMapping>;
  /**
   * Total number of mappings
   */
  totalEntries: number;
  /**
   * Cursor for getting the next page of results
   */
  nextCursor?: string | undefined;
};

/**
 * Upload mappings retrieved successfully
 */
export type ListUploadMappingsResponse =
  | components.UploadMapping
  | ResponseBody;

/** @internal */
export const ListUploadMappingsGlobals$inboundSchema: z.ZodType<
  ListUploadMappingsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListUploadMappingsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListUploadMappingsGlobals$outboundSchema: z.ZodType<
  ListUploadMappingsGlobals$Outbound,
  z.ZodTypeDef,
  ListUploadMappingsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUploadMappingsGlobals$ {
  /** @deprecated use `ListUploadMappingsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListUploadMappingsGlobals$inboundSchema;
  /** @deprecated use `ListUploadMappingsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListUploadMappingsGlobals$outboundSchema;
  /** @deprecated use `ListUploadMappingsGlobals$Outbound` instead. */
  export type Outbound = ListUploadMappingsGlobals$Outbound;
}

export function listUploadMappingsGlobalsToJSON(
  listUploadMappingsGlobals: ListUploadMappingsGlobals,
): string {
  return JSON.stringify(
    ListUploadMappingsGlobals$outboundSchema.parse(listUploadMappingsGlobals),
  );
}

export function listUploadMappingsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListUploadMappingsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUploadMappingsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUploadMappingsGlobals' from JSON`,
  );
}

/** @internal */
export const ListUploadMappingsRequest$inboundSchema: z.ZodType<
  ListUploadMappingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder: z.string().optional(),
  next_cursor: z.string().optional(),
  max_results: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    "next_cursor": "nextCursor",
    "max_results": "maxResults",
  });
});

/** @internal */
export type ListUploadMappingsRequest$Outbound = {
  folder?: string | undefined;
  next_cursor?: string | undefined;
  max_results: number;
};

/** @internal */
export const ListUploadMappingsRequest$outboundSchema: z.ZodType<
  ListUploadMappingsRequest$Outbound,
  z.ZodTypeDef,
  ListUploadMappingsRequest
> = z.object({
  folder: z.string().optional(),
  nextCursor: z.string().optional(),
  maxResults: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    nextCursor: "next_cursor",
    maxResults: "max_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUploadMappingsRequest$ {
  /** @deprecated use `ListUploadMappingsRequest$inboundSchema` instead. */
  export const inboundSchema = ListUploadMappingsRequest$inboundSchema;
  /** @deprecated use `ListUploadMappingsRequest$outboundSchema` instead. */
  export const outboundSchema = ListUploadMappingsRequest$outboundSchema;
  /** @deprecated use `ListUploadMappingsRequest$Outbound` instead. */
  export type Outbound = ListUploadMappingsRequest$Outbound;
}

export function listUploadMappingsRequestToJSON(
  listUploadMappingsRequest: ListUploadMappingsRequest,
): string {
  return JSON.stringify(
    ListUploadMappingsRequest$outboundSchema.parse(listUploadMappingsRequest),
  );
}

export function listUploadMappingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListUploadMappingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUploadMappingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUploadMappingsRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  mappings: z.array(components.UploadMapping$inboundSchema),
  total_entries: z.number().int(),
  next_cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "total_entries": "totalEntries",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ResponseBody$Outbound = {
  mappings: Array<components.UploadMapping$Outbound>;
  total_entries: number;
  next_cursor?: string | undefined;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  mappings: z.array(components.UploadMapping$outboundSchema),
  totalEntries: z.number().int(),
  nextCursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    totalEntries: "total_entries",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}

/** @internal */
export const ListUploadMappingsResponse$inboundSchema: z.ZodType<
  ListUploadMappingsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.UploadMapping$inboundSchema,
  z.lazy(() => ResponseBody$inboundSchema),
]);

/** @internal */
export type ListUploadMappingsResponse$Outbound =
  | components.UploadMapping$Outbound
  | ResponseBody$Outbound;

/** @internal */
export const ListUploadMappingsResponse$outboundSchema: z.ZodType<
  ListUploadMappingsResponse$Outbound,
  z.ZodTypeDef,
  ListUploadMappingsResponse
> = z.union([
  components.UploadMapping$outboundSchema,
  z.lazy(() => ResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUploadMappingsResponse$ {
  /** @deprecated use `ListUploadMappingsResponse$inboundSchema` instead. */
  export const inboundSchema = ListUploadMappingsResponse$inboundSchema;
  /** @deprecated use `ListUploadMappingsResponse$outboundSchema` instead. */
  export const outboundSchema = ListUploadMappingsResponse$outboundSchema;
  /** @deprecated use `ListUploadMappingsResponse$Outbound` instead. */
  export type Outbound = ListUploadMappingsResponse$Outbound;
}

export function listUploadMappingsResponseToJSON(
  listUploadMappingsResponse: ListUploadMappingsResponse,
): string {
  return JSON.stringify(
    ListUploadMappingsResponse$outboundSchema.parse(listUploadMappingsResponse),
  );
}

export function listUploadMappingsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListUploadMappingsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUploadMappingsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUploadMappingsResponse' from JSON`,
  );
}
