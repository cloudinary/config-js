/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTriggerGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ListTriggerRequest = {
  /**
   * The type of event that will trigger the notification response.
   */
  eventType?: string | undefined;
};

/**
 * List response
 */
export type ListTriggerResponse = {
  /**
   * List of trigger objects.
   */
  triggers: Array<components.TriggerInfo>;
  /**
   * Total number of triggers.
   */
  total: number;
};

/** @internal */
export const ListTriggerGlobals$inboundSchema: z.ZodType<
  ListTriggerGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListTriggerGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListTriggerGlobals$outboundSchema: z.ZodType<
  ListTriggerGlobals$Outbound,
  z.ZodTypeDef,
  ListTriggerGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTriggerGlobals$ {
  /** @deprecated use `ListTriggerGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTriggerGlobals$inboundSchema;
  /** @deprecated use `ListTriggerGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTriggerGlobals$outboundSchema;
  /** @deprecated use `ListTriggerGlobals$Outbound` instead. */
  export type Outbound = ListTriggerGlobals$Outbound;
}

export function listTriggerGlobalsToJSON(
  listTriggerGlobals: ListTriggerGlobals,
): string {
  return JSON.stringify(
    ListTriggerGlobals$outboundSchema.parse(listTriggerGlobals),
  );
}

export function listTriggerGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTriggerGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTriggerGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTriggerGlobals' from JSON`,
  );
}

/** @internal */
export const ListTriggerRequest$inboundSchema: z.ZodType<
  ListTriggerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  event_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
  });
});

/** @internal */
export type ListTriggerRequest$Outbound = {
  event_type?: string | undefined;
};

/** @internal */
export const ListTriggerRequest$outboundSchema: z.ZodType<
  ListTriggerRequest$Outbound,
  z.ZodTypeDef,
  ListTriggerRequest
> = z.object({
  eventType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTriggerRequest$ {
  /** @deprecated use `ListTriggerRequest$inboundSchema` instead. */
  export const inboundSchema = ListTriggerRequest$inboundSchema;
  /** @deprecated use `ListTriggerRequest$outboundSchema` instead. */
  export const outboundSchema = ListTriggerRequest$outboundSchema;
  /** @deprecated use `ListTriggerRequest$Outbound` instead. */
  export type Outbound = ListTriggerRequest$Outbound;
}

export function listTriggerRequestToJSON(
  listTriggerRequest: ListTriggerRequest,
): string {
  return JSON.stringify(
    ListTriggerRequest$outboundSchema.parse(listTriggerRequest),
  );
}

export function listTriggerRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTriggerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTriggerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTriggerRequest' from JSON`,
  );
}

/** @internal */
export const ListTriggerResponse$inboundSchema: z.ZodType<
  ListTriggerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  triggers: z.array(components.TriggerInfo$inboundSchema),
  total: z.number().int(),
});

/** @internal */
export type ListTriggerResponse$Outbound = {
  triggers: Array<components.TriggerInfo$Outbound>;
  total: number;
};

/** @internal */
export const ListTriggerResponse$outboundSchema: z.ZodType<
  ListTriggerResponse$Outbound,
  z.ZodTypeDef,
  ListTriggerResponse
> = z.object({
  triggers: z.array(components.TriggerInfo$outboundSchema),
  total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTriggerResponse$ {
  /** @deprecated use `ListTriggerResponse$inboundSchema` instead. */
  export const inboundSchema = ListTriggerResponse$inboundSchema;
  /** @deprecated use `ListTriggerResponse$outboundSchema` instead. */
  export const outboundSchema = ListTriggerResponse$outboundSchema;
  /** @deprecated use `ListTriggerResponse$Outbound` instead. */
  export type Outbound = ListTriggerResponse$Outbound;
}

export function listTriggerResponseToJSON(
  listTriggerResponse: ListTriggerResponse,
): string {
  return JSON.stringify(
    ListTriggerResponse$outboundSchema.parse(listTriggerResponse),
  );
}

export function listTriggerResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTriggerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTriggerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTriggerResponse' from JSON`,
  );
}
