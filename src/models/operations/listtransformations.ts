/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTransformationsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ListTransformationsRequest = {
  /**
   * Whether to return only named (`true`) or unnamed (`false`) transformations. If this parameter isn't included, both named and unnamed transformations will be returned.
   */
  named?: boolean | undefined;
  /**
   * Maximum number of transformations to return.
   */
  maxResults?: number | undefined;
  /**
   * When a request has more results to return than `max_results`, the `next_cursor` value is returned as part of the response. You can then specify this value as the `next_cursor` parameter of a following request.
   */
  nextCursor?: string | undefined;
};

/** @internal */
export const ListTransformationsGlobals$inboundSchema: z.ZodType<
  ListTransformationsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListTransformationsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListTransformationsGlobals$outboundSchema: z.ZodType<
  ListTransformationsGlobals$Outbound,
  z.ZodTypeDef,
  ListTransformationsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransformationsGlobals$ {
  /** @deprecated use `ListTransformationsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTransformationsGlobals$inboundSchema;
  /** @deprecated use `ListTransformationsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTransformationsGlobals$outboundSchema;
  /** @deprecated use `ListTransformationsGlobals$Outbound` instead. */
  export type Outbound = ListTransformationsGlobals$Outbound;
}

export function listTransformationsGlobalsToJSON(
  listTransformationsGlobals: ListTransformationsGlobals,
): string {
  return JSON.stringify(
    ListTransformationsGlobals$outboundSchema.parse(listTransformationsGlobals),
  );
}

export function listTransformationsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTransformationsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransformationsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransformationsGlobals' from JSON`,
  );
}

/** @internal */
export const ListTransformationsRequest$inboundSchema: z.ZodType<
  ListTransformationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  named: z.boolean().optional(),
  max_results: z.number().int().default(10),
  next_cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "max_results": "maxResults",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListTransformationsRequest$Outbound = {
  named?: boolean | undefined;
  max_results: number;
  next_cursor?: string | undefined;
};

/** @internal */
export const ListTransformationsRequest$outboundSchema: z.ZodType<
  ListTransformationsRequest$Outbound,
  z.ZodTypeDef,
  ListTransformationsRequest
> = z.object({
  named: z.boolean().optional(),
  maxResults: z.number().int().default(10),
  nextCursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    maxResults: "max_results",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransformationsRequest$ {
  /** @deprecated use `ListTransformationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTransformationsRequest$inboundSchema;
  /** @deprecated use `ListTransformationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTransformationsRequest$outboundSchema;
  /** @deprecated use `ListTransformationsRequest$Outbound` instead. */
  export type Outbound = ListTransformationsRequest$Outbound;
}

export function listTransformationsRequestToJSON(
  listTransformationsRequest: ListTransformationsRequest,
): string {
  return JSON.stringify(
    ListTransformationsRequest$outboundSchema.parse(listTransformationsRequest),
  );
}

export function listTransformationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTransformationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransformationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransformationsRequest' from JSON`,
  );
}
