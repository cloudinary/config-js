/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTransformationGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type CreateTransformationRequest = {
  /**
   * The valid transformation name to create.
   *
   * @remarks
   */
  transformation: string;
  createRequest: components.CreateRequest;
};

/**
 * Transformation created
 */
export type CreateTransformationResponse = {
  message?: string | undefined;
};

/** @internal */
export const CreateTransformationGlobals$inboundSchema: z.ZodType<
  CreateTransformationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type CreateTransformationGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const CreateTransformationGlobals$outboundSchema: z.ZodType<
  CreateTransformationGlobals$Outbound,
  z.ZodTypeDef,
  CreateTransformationGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransformationGlobals$ {
  /** @deprecated use `CreateTransformationGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateTransformationGlobals$inboundSchema;
  /** @deprecated use `CreateTransformationGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateTransformationGlobals$outboundSchema;
  /** @deprecated use `CreateTransformationGlobals$Outbound` instead. */
  export type Outbound = CreateTransformationGlobals$Outbound;
}

export function createTransformationGlobalsToJSON(
  createTransformationGlobals: CreateTransformationGlobals,
): string {
  return JSON.stringify(
    CreateTransformationGlobals$outboundSchema.parse(
      createTransformationGlobals,
    ),
  );
}

export function createTransformationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransformationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransformationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransformationGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTransformationRequest$inboundSchema: z.ZodType<
  CreateTransformationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  transformation: z.string(),
  create_request: components.CreateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "create_request": "createRequest",
  });
});

/** @internal */
export type CreateTransformationRequest$Outbound = {
  transformation: string;
  create_request: components.CreateRequest$Outbound;
};

/** @internal */
export const CreateTransformationRequest$outboundSchema: z.ZodType<
  CreateTransformationRequest$Outbound,
  z.ZodTypeDef,
  CreateTransformationRequest
> = z.object({
  transformation: z.string(),
  createRequest: components.CreateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createRequest: "create_request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransformationRequest$ {
  /** @deprecated use `CreateTransformationRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransformationRequest$inboundSchema;
  /** @deprecated use `CreateTransformationRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransformationRequest$outboundSchema;
  /** @deprecated use `CreateTransformationRequest$Outbound` instead. */
  export type Outbound = CreateTransformationRequest$Outbound;
}

export function createTransformationRequestToJSON(
  createTransformationRequest: CreateTransformationRequest,
): string {
  return JSON.stringify(
    CreateTransformationRequest$outboundSchema.parse(
      createTransformationRequest,
    ),
  );
}

export function createTransformationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransformationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransformationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransformationRequest' from JSON`,
  );
}

/** @internal */
export const CreateTransformationResponse$inboundSchema: z.ZodType<
  CreateTransformationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
});

/** @internal */
export type CreateTransformationResponse$Outbound = {
  message?: string | undefined;
};

/** @internal */
export const CreateTransformationResponse$outboundSchema: z.ZodType<
  CreateTransformationResponse$Outbound,
  z.ZodTypeDef,
  CreateTransformationResponse
> = z.object({
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransformationResponse$ {
  /** @deprecated use `CreateTransformationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTransformationResponse$inboundSchema;
  /** @deprecated use `CreateTransformationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTransformationResponse$outboundSchema;
  /** @deprecated use `CreateTransformationResponse$Outbound` instead. */
  export type Outbound = CreateTransformationResponse$Outbound;
}

export function createTransformationResponseToJSON(
  createTransformationResponse: CreateTransformationResponse,
): string {
  return JSON.stringify(
    CreateTransformationResponse$outboundSchema.parse(
      createTransformationResponse,
    ),
  );
}

export function createTransformationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransformationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransformationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransformationResponse' from JSON`,
  );
}
