/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteUploadMappingGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteUploadMappingRequest = {
  /**
   * The folder name of the mapping to delete
   */
  folder: string;
};

/**
 * Upload mapping deleted successfully
 */
export type DeleteUploadMappingResponse = {
  message: string;
  /**
   * Unique identifier of the deleted mapping
   */
  externalId: string;
};

/** @internal */
export const DeleteUploadMappingGlobals$inboundSchema: z.ZodType<
  DeleteUploadMappingGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteUploadMappingGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteUploadMappingGlobals$outboundSchema: z.ZodType<
  DeleteUploadMappingGlobals$Outbound,
  z.ZodTypeDef,
  DeleteUploadMappingGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteUploadMappingGlobals$ {
  /** @deprecated use `DeleteUploadMappingGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteUploadMappingGlobals$inboundSchema;
  /** @deprecated use `DeleteUploadMappingGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteUploadMappingGlobals$outboundSchema;
  /** @deprecated use `DeleteUploadMappingGlobals$Outbound` instead. */
  export type Outbound = DeleteUploadMappingGlobals$Outbound;
}

export function deleteUploadMappingGlobalsToJSON(
  deleteUploadMappingGlobals: DeleteUploadMappingGlobals,
): string {
  return JSON.stringify(
    DeleteUploadMappingGlobals$outboundSchema.parse(deleteUploadMappingGlobals),
  );
}

export function deleteUploadMappingGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteUploadMappingGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteUploadMappingGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteUploadMappingGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteUploadMappingRequest$inboundSchema: z.ZodType<
  DeleteUploadMappingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder: z.string(),
});

/** @internal */
export type DeleteUploadMappingRequest$Outbound = {
  folder: string;
};

/** @internal */
export const DeleteUploadMappingRequest$outboundSchema: z.ZodType<
  DeleteUploadMappingRequest$Outbound,
  z.ZodTypeDef,
  DeleteUploadMappingRequest
> = z.object({
  folder: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteUploadMappingRequest$ {
  /** @deprecated use `DeleteUploadMappingRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteUploadMappingRequest$inboundSchema;
  /** @deprecated use `DeleteUploadMappingRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteUploadMappingRequest$outboundSchema;
  /** @deprecated use `DeleteUploadMappingRequest$Outbound` instead. */
  export type Outbound = DeleteUploadMappingRequest$Outbound;
}

export function deleteUploadMappingRequestToJSON(
  deleteUploadMappingRequest: DeleteUploadMappingRequest,
): string {
  return JSON.stringify(
    DeleteUploadMappingRequest$outboundSchema.parse(deleteUploadMappingRequest),
  );
}

export function deleteUploadMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteUploadMappingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteUploadMappingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteUploadMappingRequest' from JSON`,
  );
}

/** @internal */
export const DeleteUploadMappingResponse$inboundSchema: z.ZodType<
  DeleteUploadMappingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  external_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type DeleteUploadMappingResponse$Outbound = {
  message: string;
  external_id: string;
};

/** @internal */
export const DeleteUploadMappingResponse$outboundSchema: z.ZodType<
  DeleteUploadMappingResponse$Outbound,
  z.ZodTypeDef,
  DeleteUploadMappingResponse
> = z.object({
  message: z.string(),
  externalId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteUploadMappingResponse$ {
  /** @deprecated use `DeleteUploadMappingResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteUploadMappingResponse$inboundSchema;
  /** @deprecated use `DeleteUploadMappingResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteUploadMappingResponse$outboundSchema;
  /** @deprecated use `DeleteUploadMappingResponse$Outbound` instead. */
  export type Outbound = DeleteUploadMappingResponse$Outbound;
}

export function deleteUploadMappingResponseToJSON(
  deleteUploadMappingResponse: DeleteUploadMappingResponse,
): string {
  return JSON.stringify(
    DeleteUploadMappingResponse$outboundSchema.parse(
      deleteUploadMappingResponse,
    ),
  );
}

export function deleteUploadMappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteUploadMappingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteUploadMappingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteUploadMappingResponse' from JSON`,
  );
}
