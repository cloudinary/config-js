/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateUploadPresetGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * upload preset created
 */
export type CreateUploadPresetResponse = {
  name: string;
  message: string;
  externalId: string;
};

/** @internal */
export const CreateUploadPresetGlobals$inboundSchema: z.ZodType<
  CreateUploadPresetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type CreateUploadPresetGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const CreateUploadPresetGlobals$outboundSchema: z.ZodType<
  CreateUploadPresetGlobals$Outbound,
  z.ZodTypeDef,
  CreateUploadPresetGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUploadPresetGlobals$ {
  /** @deprecated use `CreateUploadPresetGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateUploadPresetGlobals$inboundSchema;
  /** @deprecated use `CreateUploadPresetGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateUploadPresetGlobals$outboundSchema;
  /** @deprecated use `CreateUploadPresetGlobals$Outbound` instead. */
  export type Outbound = CreateUploadPresetGlobals$Outbound;
}

export function createUploadPresetGlobalsToJSON(
  createUploadPresetGlobals: CreateUploadPresetGlobals,
): string {
  return JSON.stringify(
    CreateUploadPresetGlobals$outboundSchema.parse(createUploadPresetGlobals),
  );
}

export function createUploadPresetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateUploadPresetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUploadPresetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUploadPresetGlobals' from JSON`,
  );
}

/** @internal */
export const CreateUploadPresetResponse$inboundSchema: z.ZodType<
  CreateUploadPresetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  message: z.string(),
  external_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type CreateUploadPresetResponse$Outbound = {
  name: string;
  message: string;
  external_id: string;
};

/** @internal */
export const CreateUploadPresetResponse$outboundSchema: z.ZodType<
  CreateUploadPresetResponse$Outbound,
  z.ZodTypeDef,
  CreateUploadPresetResponse
> = z.object({
  name: z.string(),
  message: z.string(),
  externalId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUploadPresetResponse$ {
  /** @deprecated use `CreateUploadPresetResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUploadPresetResponse$inboundSchema;
  /** @deprecated use `CreateUploadPresetResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUploadPresetResponse$outboundSchema;
  /** @deprecated use `CreateUploadPresetResponse$Outbound` instead. */
  export type Outbound = CreateUploadPresetResponse$Outbound;
}

export function createUploadPresetResponseToJSON(
  createUploadPresetResponse: CreateUploadPresetResponse,
): string {
  return JSON.stringify(
    CreateUploadPresetResponse$outboundSchema.parse(createUploadPresetResponse),
  );
}

export function createUploadPresetResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUploadPresetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUploadPresetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUploadPresetResponse' from JSON`,
  );
}
