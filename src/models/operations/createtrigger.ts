/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTriggerGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type CreateTriggerRequest = {
  /**
   * The URL that will receive the notification response.
   */
  uri: string;
  /**
   * The type of event that will trigger the notification response.
   */
  eventType: string;
};

/** @internal */
export const CreateTriggerGlobals$inboundSchema: z.ZodType<
  CreateTriggerGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type CreateTriggerGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const CreateTriggerGlobals$outboundSchema: z.ZodType<
  CreateTriggerGlobals$Outbound,
  z.ZodTypeDef,
  CreateTriggerGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTriggerGlobals$ {
  /** @deprecated use `CreateTriggerGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateTriggerGlobals$inboundSchema;
  /** @deprecated use `CreateTriggerGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateTriggerGlobals$outboundSchema;
  /** @deprecated use `CreateTriggerGlobals$Outbound` instead. */
  export type Outbound = CreateTriggerGlobals$Outbound;
}

export function createTriggerGlobalsToJSON(
  createTriggerGlobals: CreateTriggerGlobals,
): string {
  return JSON.stringify(
    CreateTriggerGlobals$outboundSchema.parse(createTriggerGlobals),
  );
}

export function createTriggerGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTriggerGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTriggerGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTriggerGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTriggerRequest$inboundSchema: z.ZodType<
  CreateTriggerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uri: z.string(),
  event_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "event_type": "eventType",
  });
});

/** @internal */
export type CreateTriggerRequest$Outbound = {
  uri: string;
  event_type: string;
};

/** @internal */
export const CreateTriggerRequest$outboundSchema: z.ZodType<
  CreateTriggerRequest$Outbound,
  z.ZodTypeDef,
  CreateTriggerRequest
> = z.object({
  uri: z.string(),
  eventType: z.string(),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTriggerRequest$ {
  /** @deprecated use `CreateTriggerRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTriggerRequest$inboundSchema;
  /** @deprecated use `CreateTriggerRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTriggerRequest$outboundSchema;
  /** @deprecated use `CreateTriggerRequest$Outbound` instead. */
  export type Outbound = CreateTriggerRequest$Outbound;
}

export function createTriggerRequestToJSON(
  createTriggerRequest: CreateTriggerRequest,
): string {
  return JSON.stringify(
    CreateTriggerRequest$outboundSchema.parse(createTriggerRequest),
  );
}

export function createTriggerRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTriggerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTriggerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTriggerRequest' from JSON`,
  );
}
