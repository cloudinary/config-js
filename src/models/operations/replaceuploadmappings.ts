/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReplaceUploadMappingsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type Mapping = {
  folder: string;
  template: string;
};

export type ReplaceUploadMappingsRequest = {
  mappings: Array<Mapping>;
};

/**
 * upload mappings replaced
 */
export type ReplaceUploadMappingsResponse = {
  message: string;
};

/** @internal */
export const ReplaceUploadMappingsGlobals$inboundSchema: z.ZodType<
  ReplaceUploadMappingsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ReplaceUploadMappingsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ReplaceUploadMappingsGlobals$outboundSchema: z.ZodType<
  ReplaceUploadMappingsGlobals$Outbound,
  z.ZodTypeDef,
  ReplaceUploadMappingsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReplaceUploadMappingsGlobals$ {
  /** @deprecated use `ReplaceUploadMappingsGlobals$inboundSchema` instead. */
  export const inboundSchema = ReplaceUploadMappingsGlobals$inboundSchema;
  /** @deprecated use `ReplaceUploadMappingsGlobals$outboundSchema` instead. */
  export const outboundSchema = ReplaceUploadMappingsGlobals$outboundSchema;
  /** @deprecated use `ReplaceUploadMappingsGlobals$Outbound` instead. */
  export type Outbound = ReplaceUploadMappingsGlobals$Outbound;
}

export function replaceUploadMappingsGlobalsToJSON(
  replaceUploadMappingsGlobals: ReplaceUploadMappingsGlobals,
): string {
  return JSON.stringify(
    ReplaceUploadMappingsGlobals$outboundSchema.parse(
      replaceUploadMappingsGlobals,
    ),
  );
}

export function replaceUploadMappingsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ReplaceUploadMappingsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReplaceUploadMappingsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReplaceUploadMappingsGlobals' from JSON`,
  );
}

/** @internal */
export const Mapping$inboundSchema: z.ZodType<Mapping, z.ZodTypeDef, unknown> =
  z.object({
    folder: z.string(),
    template: z.string(),
  });

/** @internal */
export type Mapping$Outbound = {
  folder: string;
  template: string;
};

/** @internal */
export const Mapping$outboundSchema: z.ZodType<
  Mapping$Outbound,
  z.ZodTypeDef,
  Mapping
> = z.object({
  folder: z.string(),
  template: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mapping$ {
  /** @deprecated use `Mapping$inboundSchema` instead. */
  export const inboundSchema = Mapping$inboundSchema;
  /** @deprecated use `Mapping$outboundSchema` instead. */
  export const outboundSchema = Mapping$outboundSchema;
  /** @deprecated use `Mapping$Outbound` instead. */
  export type Outbound = Mapping$Outbound;
}

export function mappingToJSON(mapping: Mapping): string {
  return JSON.stringify(Mapping$outboundSchema.parse(mapping));
}

export function mappingFromJSON(
  jsonString: string,
): SafeParseResult<Mapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Mapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Mapping' from JSON`,
  );
}

/** @internal */
export const ReplaceUploadMappingsRequest$inboundSchema: z.ZodType<
  ReplaceUploadMappingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  mappings: z.array(z.lazy(() => Mapping$inboundSchema)),
});

/** @internal */
export type ReplaceUploadMappingsRequest$Outbound = {
  mappings: Array<Mapping$Outbound>;
};

/** @internal */
export const ReplaceUploadMappingsRequest$outboundSchema: z.ZodType<
  ReplaceUploadMappingsRequest$Outbound,
  z.ZodTypeDef,
  ReplaceUploadMappingsRequest
> = z.object({
  mappings: z.array(z.lazy(() => Mapping$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReplaceUploadMappingsRequest$ {
  /** @deprecated use `ReplaceUploadMappingsRequest$inboundSchema` instead. */
  export const inboundSchema = ReplaceUploadMappingsRequest$inboundSchema;
  /** @deprecated use `ReplaceUploadMappingsRequest$outboundSchema` instead. */
  export const outboundSchema = ReplaceUploadMappingsRequest$outboundSchema;
  /** @deprecated use `ReplaceUploadMappingsRequest$Outbound` instead. */
  export type Outbound = ReplaceUploadMappingsRequest$Outbound;
}

export function replaceUploadMappingsRequestToJSON(
  replaceUploadMappingsRequest: ReplaceUploadMappingsRequest,
): string {
  return JSON.stringify(
    ReplaceUploadMappingsRequest$outboundSchema.parse(
      replaceUploadMappingsRequest,
    ),
  );
}

export function replaceUploadMappingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReplaceUploadMappingsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReplaceUploadMappingsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReplaceUploadMappingsRequest' from JSON`,
  );
}

/** @internal */
export const ReplaceUploadMappingsResponse$inboundSchema: z.ZodType<
  ReplaceUploadMappingsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type ReplaceUploadMappingsResponse$Outbound = {
  message: string;
};

/** @internal */
export const ReplaceUploadMappingsResponse$outboundSchema: z.ZodType<
  ReplaceUploadMappingsResponse$Outbound,
  z.ZodTypeDef,
  ReplaceUploadMappingsResponse
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReplaceUploadMappingsResponse$ {
  /** @deprecated use `ReplaceUploadMappingsResponse$inboundSchema` instead. */
  export const inboundSchema = ReplaceUploadMappingsResponse$inboundSchema;
  /** @deprecated use `ReplaceUploadMappingsResponse$outboundSchema` instead. */
  export const outboundSchema = ReplaceUploadMappingsResponse$outboundSchema;
  /** @deprecated use `ReplaceUploadMappingsResponse$Outbound` instead. */
  export type Outbound = ReplaceUploadMappingsResponse$Outbound;
}

export function replaceUploadMappingsResponseToJSON(
  replaceUploadMappingsResponse: ReplaceUploadMappingsResponse,
): string {
  return JSON.stringify(
    ReplaceUploadMappingsResponse$outboundSchema.parse(
      replaceUploadMappingsResponse,
    ),
  );
}

export function replaceUploadMappingsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReplaceUploadMappingsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReplaceUploadMappingsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReplaceUploadMappingsResponse' from JSON`,
  );
}
