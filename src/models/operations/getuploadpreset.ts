/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUploadPresetGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type GetUploadPresetRequest = {
  name: string;
};

/** @internal */
export const GetUploadPresetGlobals$inboundSchema: z.ZodType<
  GetUploadPresetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type GetUploadPresetGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const GetUploadPresetGlobals$outboundSchema: z.ZodType<
  GetUploadPresetGlobals$Outbound,
  z.ZodTypeDef,
  GetUploadPresetGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUploadPresetGlobals$ {
  /** @deprecated use `GetUploadPresetGlobals$inboundSchema` instead. */
  export const inboundSchema = GetUploadPresetGlobals$inboundSchema;
  /** @deprecated use `GetUploadPresetGlobals$outboundSchema` instead. */
  export const outboundSchema = GetUploadPresetGlobals$outboundSchema;
  /** @deprecated use `GetUploadPresetGlobals$Outbound` instead. */
  export type Outbound = GetUploadPresetGlobals$Outbound;
}

export function getUploadPresetGlobalsToJSON(
  getUploadPresetGlobals: GetUploadPresetGlobals,
): string {
  return JSON.stringify(
    GetUploadPresetGlobals$outboundSchema.parse(getUploadPresetGlobals),
  );
}

export function getUploadPresetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetUploadPresetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUploadPresetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUploadPresetGlobals' from JSON`,
  );
}

/** @internal */
export const GetUploadPresetRequest$inboundSchema: z.ZodType<
  GetUploadPresetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type GetUploadPresetRequest$Outbound = {
  name: string;
};

/** @internal */
export const GetUploadPresetRequest$outboundSchema: z.ZodType<
  GetUploadPresetRequest$Outbound,
  z.ZodTypeDef,
  GetUploadPresetRequest
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUploadPresetRequest$ {
  /** @deprecated use `GetUploadPresetRequest$inboundSchema` instead. */
  export const inboundSchema = GetUploadPresetRequest$inboundSchema;
  /** @deprecated use `GetUploadPresetRequest$outboundSchema` instead. */
  export const outboundSchema = GetUploadPresetRequest$outboundSchema;
  /** @deprecated use `GetUploadPresetRequest$Outbound` instead. */
  export type Outbound = GetUploadPresetRequest$Outbound;
}

export function getUploadPresetRequestToJSON(
  getUploadPresetRequest: GetUploadPresetRequest,
): string {
  return JSON.stringify(
    GetUploadPresetRequest$outboundSchema.parse(getUploadPresetRequest),
  );
}

export function getUploadPresetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUploadPresetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUploadPresetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUploadPresetRequest' from JSON`,
  );
}
