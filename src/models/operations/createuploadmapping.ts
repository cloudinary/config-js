/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateUploadMappingGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type CreateUploadMappingRequest = {
  /**
   * The folder name for the mapping
   */
  folder: string;
  /**
   * The template URL
   */
  template: string;
};

/**
 * Upload mapping created successfully
 */
export type CreateUploadMappingResponse = {
  message: string;
  /**
   * The folder name that was created
   */
  folder: string;
  /**
   * Unique identifier for the mapping
   */
  externalId: string;
};

/** @internal */
export const CreateUploadMappingGlobals$inboundSchema: z.ZodType<
  CreateUploadMappingGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type CreateUploadMappingGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const CreateUploadMappingGlobals$outboundSchema: z.ZodType<
  CreateUploadMappingGlobals$Outbound,
  z.ZodTypeDef,
  CreateUploadMappingGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUploadMappingGlobals$ {
  /** @deprecated use `CreateUploadMappingGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateUploadMappingGlobals$inboundSchema;
  /** @deprecated use `CreateUploadMappingGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateUploadMappingGlobals$outboundSchema;
  /** @deprecated use `CreateUploadMappingGlobals$Outbound` instead. */
  export type Outbound = CreateUploadMappingGlobals$Outbound;
}

export function createUploadMappingGlobalsToJSON(
  createUploadMappingGlobals: CreateUploadMappingGlobals,
): string {
  return JSON.stringify(
    CreateUploadMappingGlobals$outboundSchema.parse(createUploadMappingGlobals),
  );
}

export function createUploadMappingGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateUploadMappingGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUploadMappingGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUploadMappingGlobals' from JSON`,
  );
}

/** @internal */
export const CreateUploadMappingRequest$inboundSchema: z.ZodType<
  CreateUploadMappingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folder: z.string(),
  template: z.string(),
});

/** @internal */
export type CreateUploadMappingRequest$Outbound = {
  folder: string;
  template: string;
};

/** @internal */
export const CreateUploadMappingRequest$outboundSchema: z.ZodType<
  CreateUploadMappingRequest$Outbound,
  z.ZodTypeDef,
  CreateUploadMappingRequest
> = z.object({
  folder: z.string(),
  template: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUploadMappingRequest$ {
  /** @deprecated use `CreateUploadMappingRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUploadMappingRequest$inboundSchema;
  /** @deprecated use `CreateUploadMappingRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUploadMappingRequest$outboundSchema;
  /** @deprecated use `CreateUploadMappingRequest$Outbound` instead. */
  export type Outbound = CreateUploadMappingRequest$Outbound;
}

export function createUploadMappingRequestToJSON(
  createUploadMappingRequest: CreateUploadMappingRequest,
): string {
  return JSON.stringify(
    CreateUploadMappingRequest$outboundSchema.parse(createUploadMappingRequest),
  );
}

export function createUploadMappingRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateUploadMappingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUploadMappingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUploadMappingRequest' from JSON`,
  );
}

/** @internal */
export const CreateUploadMappingResponse$inboundSchema: z.ZodType<
  CreateUploadMappingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  folder: z.string(),
  external_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type CreateUploadMappingResponse$Outbound = {
  message: string;
  folder: string;
  external_id: string;
};

/** @internal */
export const CreateUploadMappingResponse$outboundSchema: z.ZodType<
  CreateUploadMappingResponse$Outbound,
  z.ZodTypeDef,
  CreateUploadMappingResponse
> = z.object({
  message: z.string(),
  folder: z.string(),
  externalId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUploadMappingResponse$ {
  /** @deprecated use `CreateUploadMappingResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUploadMappingResponse$inboundSchema;
  /** @deprecated use `CreateUploadMappingResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUploadMappingResponse$outboundSchema;
  /** @deprecated use `CreateUploadMappingResponse$Outbound` instead. */
  export type Outbound = CreateUploadMappingResponse$Outbound;
}

export function createUploadMappingResponseToJSON(
  createUploadMappingResponse: CreateUploadMappingResponse,
): string {
  return JSON.stringify(
    CreateUploadMappingResponse$outboundSchema.parse(
      createUploadMappingResponse,
    ),
  );
}

export function createUploadMappingResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUploadMappingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUploadMappingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUploadMappingResponse' from JSON`,
  );
}
